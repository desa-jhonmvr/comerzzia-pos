/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * JDevolucion.java
 *
 * Created on 16-sep-2011, 8:06:51
 */
package com.comerzzia.jpos.gui.ventas;

import com.comerzzia.jpos.dto.TipoDevolucionDTO;
import com.comerzzia.jpos.entity.db.CabPrefactura;
import com.comerzzia.jpos.gui.IVista;
import com.comerzzia.jpos.gui.JPrincipal;
import com.comerzzia.jpos.gui.components.JPanelImagenFondo;
import com.comerzzia.jpos.gui.components.form.JTextFieldForm;
import com.comerzzia.jpos.gui.modelos.TipoDevolucionKeySelectionManager;
import com.comerzzia.jpos.gui.validation.IValidableForm;
import com.comerzzia.jpos.gui.validation.IViewerValidationFormError;
import com.comerzzia.jpos.gui.validation.ValidationFormException;
import com.comerzzia.jpos.gui.ventas.modelos.MostrarCabPrefacturaCellRenderer;
import com.comerzzia.jpos.gui.ventas.modelos.MostrarCabPrefacturaTableModel;
import com.comerzzia.jpos.persistencia.facturacion.prefactura.CabPrefacturaDao;
import com.comerzzia.jpos.servicios.core.variables.Variables;
import com.comerzzia.jpos.servicios.prefactura.ParamBuscarPrefactura;
import com.comerzzia.jpos.util.enums.EnumEstadoPrefactura;
import com.comerzzia.util.swing.acciones.Acciones;
import es.mpsistemas.util.log.Logger;
import java.awt.Component;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.net.URL;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultComboBoxModel;

import javax.swing.DefaultListCellRenderer;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.text.MaskFormatter;
import org.apache.commons.lang.StringUtils;

/**
 *
 * @author Gabriel Simbania
 */
public class JBuscarPreFactura extends JPanelImagenFondo implements IVista, KeyListener, IViewerValidationFormError {
    
    private static Logger LOG_POS = Logger.getMLogger(JBuscarPreFactura.class);
    
    private static final long serialVersionUID = 2066295570248797084L;
    
    JPrincipal ventana_padre = null;
    List<IValidableForm> formulario;
    String mensajeError = "";
    boolean procesar = false;
    private EnumEstadoPrefactura estado;

    //Nuevos
    List<CabPrefactura> cabPrefacturas;
    MaskFormatter formatter;

    /**
     * Creates new form JPreFactura
     *
     * @param ventana_padre
     */
    public JBuscarPreFactura(JPrincipal ventana_padre) {
        super();
        this.ventana_padre = ventana_padre;
        try {
            formulario = new LinkedList<IValidableForm>();
            initComponents();
            
            String prefijo = Variables.getVariable(Variables.POS_UI_SKIN);
            URL myurl = this.getClass().getResource("/skin/" + prefijo + "/" + prefijo + "_buscar_reservaciones.png");
            
            this.setImagenFondo((Image) ImageIO.read(new File(myurl.getPath())));

            //creamos el formulario
            crearFormulario();
            
            inicializarComboEstado();
            
            registraEventoEnterBoton();
            addFunctionKeys();
            //metemos los elementos en el formulario
        } catch (Exception e) {
            LOG_POS.error("Error " + e.getMessage(), e);
        }
    }
    
    private void inicializarComboEstado() {
        
        estado = null;
        List<String> ls = new ArrayList<>();
        ls.add(StringUtils.EMPTY);
        ls.add(EnumEstadoPrefactura.CREADO.getDescripcion());
        ls.add(EnumEstadoPrefactura.PROCESADO.getDescripcion());
        ls.add(EnumEstadoPrefactura.PROCESADO_NOVEDAD.getDescripcion());
        
        lst_estado.setModel(new DefaultComboBoxModel(ls.toArray()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sesion1 = new com.comerzzia.jpos.servicios.login.Sesion();
        jLabel2 = new javax.swing.JLabel();
        t_cedula = new com.comerzzia.jpos.gui.components.form.JTextFieldForm();
        jLabel6 = new javax.swing.JLabel();
        lb_error = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lst_estado = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tb_preFactura = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        t_orden = new com.comerzzia.jpos.gui.components.form.JTextFieldForm();
        jLabel9 = new javax.swing.JLabel();
        t_fecha = new com.comerzzia.jpos.gui.components.form.JTextFieldForm();
        b_menu_ppal = new com.comerzzia.jpos.gui.components.form.JButtonForm();

        setMaximumSize(new java.awt.Dimension(433, 457));
        setMinimumSize(new java.awt.Dimension(433, 457));
        setPreferredSize(new java.awt.Dimension(954, 723));
        setRequestFocusEnabled(false);

        jLabel2.setDisplayedMnemonic('f');
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("Fecha Corte:");

        t_cedula.setMinimumSize(new java.awt.Dimension(8, 27));
        t_cedula.setPreferredSize(new java.awt.Dimension(8, 27));
        t_cedula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_cedulaActionPerformed(evt);
            }
        });
        t_cedula.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cedula_KeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel6.setText("Prefactura - Página web");

        lb_error.setForeground(new java.awt.Color(204, 0, 0));
        lb_error.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lb_error.setAutoscrolls(true);

        jLabel7.setDisplayedMnemonic('m');
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel7.setText("Estado : ");

        lst_estado.setKeySelectionManager(new TipoDevolucionKeySelectionManager());
        lst_estado.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(
                JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (value instanceof TipoDevolucionDTO) {
                    TipoDevolucionDTO mec = (TipoDevolucionDTO)value;
                    setText(mec.getDescripcionDevolucion());
                }
                return this;
            }
        });
        lst_estado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lst_estadoActionPerformed(evt);
            }
        });
        lst_estado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                lst_estadoKeyTyped(evt);
            }
        });

        tb_preFactura.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "No ORDEN", "CLIENTE", "VALOR", "VER"
            }
        ));
        tb_preFactura.setRequestFocusEnabled(false);
        tb_preFactura.setSelectionBackground(new java.awt.Color(204, 204, 204));
        tb_preFactura.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tb_preFacturaKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tb_preFactura);

        jLabel3.setDisplayedMnemonic('f');
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("Cédula :");

        jLabel8.setDisplayedMnemonic('f');
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel8.setText("No. Orden :");

        t_orden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_ordenActionPerformed(evt);
            }
        });
        t_orden.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_ordenKeyTyped(evt);
            }
        });

        jLabel9.setDisplayedMnemonic('f');
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel9.setText("dd/mm/yyyy");

        t_fecha.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                t_fechaFocusLost(evt);
            }
        });
        t_fecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_fechaActionPerformed(evt);
            }
        });
        t_fecha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_fecha_KeyTyped(evt);
            }
        });

        b_menu_ppal.setText("<html><center>Menú Principal <br/>F12</center></html>");
        b_menu_ppal.setMargin(new java.awt.Insets(2, 9, 2, 9));
        b_menu_ppal.setNextFocusableComponent(t_orden);
        b_menu_ppal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_menu_ppalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lb_error, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(t_orden, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(t_cedula, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(72, 72, 72)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lst_estado, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(t_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 67, Short.MAX_VALUE)))
                        .addGap(46, 46, 46))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 889, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(b_menu_ppal, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(lb_error, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel8)
                        .addGap(27, 27, 27))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(t_orden, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(lst_estado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(t_cedula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(t_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 153, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(b_menu_ppal, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel2.getAccessibleContext().setAccessibleName("Fecha");
    }// </editor-fold>//GEN-END:initComponents

    private void tb_preFacturaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tb_preFacturaKeyPressed
        
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            
            try {
                CabPrefactura cabPrefactura = cabPrefacturas.get(tb_preFactura.getSelectedRow());
                cabPrefactura = CabPrefacturaDao.consultaCabeceraPrefacturaByUid(cabPrefactura.getUidCabId());
                ventana_padre.addMostrarPrefactura(cabPrefactura);
                ventana_padre.showView("mostrar_prefactura");
            } catch (Exception ex) {
                LOG_POS.error("Error al consultar la prefactura " + ex.getMessage(), ex);
            }
        } else if (evt.getKeyCode() == KeyEvent.VK_TAB && evt.isShiftDown()) {
            tb_preFactura.transferFocusBackward();
        } else if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            tb_preFactura.transferFocus();
        }
    }//GEN-LAST:event_tb_preFacturaKeyPressed

    private void lst_estadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lst_estadoActionPerformed

    }//GEN-LAST:event_lst_estadoActionPerformed

    private void t_cedulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_cedulaActionPerformed
    }//GEN-LAST:event_t_cedulaActionPerformed

    private void t_fechaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_fechaFocusLost
    }//GEN-LAST:event_t_fechaFocusLost

    private void t_fechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_fechaActionPerformed
    }//GEN-LAST:event_t_fechaActionPerformed

    private void b_menu_ppalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_menu_ppalActionPerformed
        accionMenu();
    }//GEN-LAST:event_b_menu_ppalActionPerformed

    private void t_ordenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_ordenActionPerformed
    }//GEN-LAST:event_t_ordenActionPerformed

    private void t_ordenKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_ordenKeyTyped
        accionIntro(evt);
    }//GEN-LAST:event_t_ordenKeyTyped

    private void cedula_KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cedula_KeyTyped
        accionIntro(evt);
    }//GEN-LAST:event_cedula_KeyTyped

    private void t_fecha_KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_fecha_KeyTyped
        accionIntro(evt);
    }//GEN-LAST:event_t_fecha_KeyTyped

    private void lst_estadoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lst_estadoKeyTyped
        if (lst_estado.getSelectedItem() != null) {
            try {
                String descripcion = (String) lst_estado.getSelectedItem();
                estado = EnumEstadoPrefactura.getByDescripcion(descripcion);
                accionIntro(evt);
            } catch (Exception ex) {
                java.util.logging.Logger.getLogger(JBuscarPreFactura.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_lst_estadoKeyTyped

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.comerzzia.jpos.gui.components.form.JButtonForm b_menu_ppal;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lb_error;
    private javax.swing.JComboBox lst_estado;
    private com.comerzzia.jpos.servicios.login.Sesion sesion1;
    private com.comerzzia.jpos.gui.components.form.JTextFieldForm t_cedula;
    private com.comerzzia.jpos.gui.components.form.JTextFieldForm t_fecha;
    private com.comerzzia.jpos.gui.components.form.JTextFieldForm t_orden;
    private javax.swing.JTable tb_preFactura;
    // End of variables declaration//GEN-END:variables

    private void crearFormulario() {
        // Elementos del formulario susceptibles de validarse o resetearse 

        formulario.add(t_cedula);
    }
    
    private void accionMenu() {
        try {
            ventana_padre.mostrarMenu();
        } catch (Exception e) {
            LOG_POS.debug("No se pudo llamar al menu", e);
            ventana_padre.crearError(null);
        }
    }
    
    @Override
    public void clearError() {
        lb_error.setText("");
    }
    
    @Override
    public void iniciaVista() {
        
        lst_estado.setSelectedIndex(1);
        t_orden.requestFocusInWindow();
        String descripcion = (String) lst_estado.getSelectedItem();
        estado = EnumEstadoPrefactura.getByDescripcion(descripcion);
    }
    
    private void refrescarTablaPrefactura() {
        try {
            String numOrden = StringUtils.EMPTY.equals(t_orden.getText()) ? null : t_orden.getText();
            ParamBuscarPrefactura param = new ParamBuscarPrefactura(estado, numOrden, t_cedula.getText(), t_fecha.getText());
            cabPrefacturas = CabPrefacturaDao.consultaCabeceraPrefacturaByCriterios(param);
            MostrarCabPrefacturaTableModel modelo = new MostrarCabPrefacturaTableModel(cabPrefacturas);
            tb_preFactura.setModel(modelo);
            tb_preFactura.setDefaultRenderer(Object.class, new MostrarCabPrefacturaCellRenderer());
            dibujarTablaPrefactura();
            
        } catch (Exception ex) {
            LOG_POS.error("No se pudo recargar la Interfaz de Pendiente de Entrega", ex);
        }
    }
    
    private void dibujarTablaPrefactura() {
        tb_preFactura.getColumnModel().getColumn(0).setPreferredWidth(65);
        tb_preFactura.getColumnModel().getColumn(1).setPreferredWidth(130);
        tb_preFactura.getColumnModel().getColumn(2).setPreferredWidth(55);
        tb_preFactura.getColumnModel().getColumn(3).setPreferredWidth(100);
    }
    
    private void addFunctionKeys() {
        
        LOG_POS.info("Función de acciones de teclado");
        
        Acciones.crearAccionFocoTabla(this, tb_preFactura);
        
        tb_preFactura.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "Enter");
        tb_preFactura.getActionMap().put("Enter", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                accionEnter();
            }
        });
        
        KeyStroke f12 = KeyStroke.getKeyStroke(KeyEvent.VK_F12, 0);
        Action listenerf12 = new AbstractAction() {
            
            @Override
            public void actionPerformed(ActionEvent ae) {
                b_menu_ppalActionPerformed(ae);
                
            }
        };
        addHotKey(f12, "IdentClientF12", listenerf12);
        
    }
    
    private void accionIntro(KeyEvent ke) {
        
        if ((t_orden.hasFocus() || t_fecha.hasFocus() || t_orden.hasFocus() || lst_estado.hasFocus() || t_cedula.hasFocus())
                && ke.getKeyChar() == '\n') {
            
            JTextFieldForm focoEn = null;
            
            if (ke.getComponent() instanceof JTextFieldForm) {
                focoEn = (JTextFieldForm) ke.getComponent();
            }
            refrescarTablaPrefactura();
            
            if (tb_preFactura.getRowCount() < 1 && focoEn != null) {
                focoEn.requestFocus();
            }
            
            if (tb_preFactura.getRowCount() > 0) {
                ListSelectionModel selectionModel = tb_preFactura.getSelectionModel();
                selectionModel.setSelectionInterval(0, 0);
                tb_preFactura.requestFocus();
            }
            
        }
    }
    
    private void accionEnter() {
        try {
            int fila = tb_preFactura.getSelectedRow();
            
        } catch (IndexOutOfBoundsException e) {
            JPrincipal.getInstance().crearError("Debe de realizar una búsqueda antes de cambiar una línea de factura. ");
        } catch (Exception e) {
            LOG_POS.error(e.getMessage(), e);
            JPrincipal.getInstance().crearError("Error cambiando el estado de las líneas.");
        }
    }
    
    @Override
    public void iniciaFoco() {
        t_orden.requestFocus();
    }
    
    @Override
    public void keyTyped(KeyEvent ke) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    @Override
    public void keyPressed(KeyEvent ke) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    @Override
    public void keyReleased(KeyEvent ke) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    @Override
    public void addError(ValidationFormException e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
}
