/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * JDevolucion.java
 *
 * Created on 16-sep-2011, 8:06:51
 */
package com.comerzzia.jpos.gui.devoluciones;

import com.comerzzia.jpos.dto.ItemDTO;
import com.comerzzia.jpos.entity.db.MotivoDevolucion;
import com.comerzzia.jpos.entity.db.Vendedor;
import com.comerzzia.jpos.dto.TipoDevolucionDTO;
import com.comerzzia.jpos.dto.ventas.DocumentoDTO;
import com.comerzzia.jpos.dto.ventas.MedioPagoDTO;
import com.comerzzia.jpos.dto.ventas.MotivoDevolucionDTO;
import com.comerzzia.jpos.entity.db.CajaDet;
import com.comerzzia.jpos.entity.db.TicketsAlm;
import com.comerzzia.jpos.gui.JPrincipal;
import com.comerzzia.jpos.gui.components.JVentanaDialogo;
import com.comerzzia.jpos.gui.devoluciones.modelos.MostrarFormasPagoCellRenderer;
import com.comerzzia.jpos.gui.devoluciones.modelos.MostrarFormasPagoTableModel;
import com.comerzzia.jpos.gui.modelos.MotivosDevolucionKeySelectionManager;
import com.comerzzia.jpos.gui.modelos.TipoDevolucionKeySelectionManager;
import com.comerzzia.jpos.gui.modelos.VendedorKeySelectionManager;
import com.comerzzia.jpos.gui.validation.IValidableForm;
import com.comerzzia.jpos.gui.validation.IViewerValidationFormError;
import com.comerzzia.jpos.gui.validation.ValidadorObligatoriedad;
import com.comerzzia.jpos.gui.validation.ValidadorTexto;
import com.comerzzia.jpos.gui.validation.ValidationFormException;
import com.comerzzia.jpos.persistencia.cajas.GestionDeCajasDao;
import com.comerzzia.jpos.persistencia.tickets.TicketsDao;
import com.comerzzia.jpos.servicios.articulos.ArticuloNotFoundException;
import com.comerzzia.jpos.servicios.login.Sesion;
import com.comerzzia.jpos.servicios.core.variables.VariablesAlm;
import com.comerzzia.jpos.util.EnumTipoDevolucion;
import com.comerzzia.util.swing.acciones.Acciones;
import es.mpsistemas.util.log.Logger;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import javax.persistence.NoResultException;
import javax.swing.AbstractAction;

import javax.swing.DefaultListCellRenderer;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.KeyStroke;

/**
 *
 * @author MGRI
 */
public class JDevolucion extends JVentanaDialogo implements IViewerValidationFormError {

    private static Logger log = Logger.getMLogger(JVentanaDialogo.class);
    List<IValidableForm> formulario;
    List<MedioPagoDTO> formasPago;
    DocumentoDTO documentoDTO;
    String mensajeError = "";
    boolean esOtroLocal = false;
    boolean procesar = false;
    boolean tienePendienteEntrega = false;

    /**
     * Creates new form JDevolucion
     */
    public JDevolucion() {
        super();
        try {
            formulario = new LinkedList<IValidableForm>();
            initComponents();
            if (Sesion.isSukasa()) {
                deshabilitaElementosSukasa();
            }
            //creamos la validación
            inicializaValidacion();
            //creamos el formulario
            crearFormulario();

            t_factura1.setText(VariablesAlm.getVariable(VariablesAlm.COD_ALMACEN));
            registraEventoEnterBoton();
            addFunctionKeys();
            //metemos los elementos en el formulario
        } catch (Exception e) {

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        sesion1 = new com.comerzzia.jpos.servicios.login.Sesion();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        t_factura1 = new com.comerzzia.jpos.gui.components.form.JTextFieldForm();
        t_factura2 = new com.comerzzia.jpos.gui.components.form.JTextFieldForm();
        t_factura3 = new com.comerzzia.jpos.gui.components.form.JTextFieldForm();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        l_motivo = new javax.swing.JComboBox();
        l_vendedor = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        lb_vendedor = new javax.swing.JLabel();
        t_estado_mercaderia = new com.comerzzia.jpos.gui.components.form.JTextFieldForm();
        jScrollPane1 = new javax.swing.JScrollPane();
        t_observaciones = new com.comerzzia.jpos.gui.components.form.JTextAreaForm();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        b_cancelar = new com.comerzzia.jpos.gui.components.form.JButtonForm();
        b_aceptar = new com.comerzzia.jpos.gui.components.form.JButtonForm();
        lb_error = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        ltipo_dev = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tb_formasPago = new javax.swing.JTable();

        setMaximumSize(new java.awt.Dimension(433, 457));
        setMinimumSize(new java.awt.Dimension(433, 457));
        setRequestFocusEnabled(false);

        jLabel2.setDisplayedMnemonic('f');
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setLabelFor(t_factura2);
        jLabel2.setText("Factura:");

        jLabel3.setDisplayedMnemonic('m');
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setLabelFor(l_motivo);
        jLabel3.setText("Motivo : ");

        t_factura1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        t_factura1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_factura1ActionPerformed(evt);
            }
        });

        t_factura2.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        t_factura3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        t_factura3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                t_factura3FocusLost(evt);
            }
        });

        jLabel4.setText("-");

        jLabel5.setText("-");

        l_motivo.setKeySelectionManager(new MotivosDevolucionKeySelectionManager());
        l_motivo.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(
                JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (value instanceof MotivoDevolucion) {
                    MotivoDevolucion mec = (MotivoDevolucion)value;
                    setText(mec.getDescripcionMotivo());
                }
                return this;
            }
        });

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${listaMotivosDevolucion}");
        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, sesion1, eLProperty, l_motivo);
        bindingGroup.addBinding(jComboBoxBinding);

        l_vendedor.setSelectedItem(new Vendedor());
        l_vendedor.setKeySelectionManager(new VendedorKeySelectionManager());
        l_vendedor.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(
                JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (value instanceof Vendedor) {
                    Vendedor mec = (Vendedor)value;
                    setText(mec.getNombreVendedor()+" "+mec.getApellidosVendedor());
                }
                return this;
            }
        });

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${listaVendedores}");
        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, sesion1, eLProperty, l_vendedor);
        bindingGroup.addBinding(jComboBoxBinding);

        l_vendedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                l_vendedorActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel6.setText("Devolución");

        lb_vendedor.setDisplayedMnemonic('v');
        lb_vendedor.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lb_vendedor.setLabelFor(l_vendedor);
        lb_vendedor.setText("Vendedor :");

        t_observaciones.setColumns(20);
        t_observaciones.setRows(5);
        jScrollPane1.setViewportView(t_observaciones);

        jLabel8.setDisplayedMnemonic('e');
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setLabelFor(t_estado_mercaderia);
        jLabel8.setText("Estado Mercadería :");
        jLabel8.setMaximumSize(null);
        jLabel8.setMinimumSize(null);
        jLabel8.setPreferredSize(null);

        jLabel9.setDisplayedMnemonic('o');
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setLabelFor(t_observaciones);
        jLabel9.setText("Observaciones :");

        b_cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/comerzzia/jpos/imagenes/iconos/cancelar.png"))); // NOI18N
        b_cancelar.setText("Cancelar");
        b_cancelar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        b_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_cancelarActionPerformed(evt);
            }
        });

        b_aceptar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/comerzzia/jpos/imagenes/iconos/aceptar.png"))); // NOI18N
        b_aceptar.setMnemonic('a');
        b_aceptar.setText("Aceptar");
        b_aceptar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        b_aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_aceptarActionPerformed(evt);
            }
        });

        lb_error.setForeground(new java.awt.Color(204, 0, 0));
        lb_error.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lb_error.setAutoscrolls(true);

        jLabel7.setDisplayedMnemonic('m');
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setLabelFor(l_motivo);
        jLabel7.setText("Tipo : ");

        ltipo_dev.setKeySelectionManager(new TipoDevolucionKeySelectionManager());
        ltipo_dev.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(
                JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (value instanceof TipoDevolucionDTO) {
                    TipoDevolucionDTO mec = (TipoDevolucionDTO)value;
                    setText(mec.getDescripcionDevolucion());
                }
                return this;
            }
        });

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${listaTipoDevolucionDTOs}");
        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, sesion1, eLProperty, ltipo_dev);
        bindingGroup.addBinding(jComboBoxBinding);

        ltipo_dev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ltipo_devActionPerformed(evt);
            }
        });

        tb_formasPago.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Medio Pago", "Valor", "Cruzar"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_formasPago.setRequestFocusEnabled(false);
        tb_formasPago.setSelectionBackground(new java.awt.Color(204, 204, 204));
        tb_formasPago.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tb_formasPagoKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tb_formasPago);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lb_error, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lb_vendedor, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(l_motivo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(l_vendedor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(t_estado_mercaderia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(t_factura1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(t_factura2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(t_factura3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(b_aceptar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(13, 13, 13)
                                .addComponent(b_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(ltipo_dev, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(54, 54, 54))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lb_error, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(t_factura1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(t_factura2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(t_factura3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5))
                    .addComponent(jLabel2))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(ltipo_dev, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(l_motivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(l_vendedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lb_vendedor)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel3)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(t_estado_mercaderia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(jLabel9)
                        .addGap(67, 67, 67)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(b_aceptar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void l_vendedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_l_vendedorActionPerformed
}//GEN-LAST:event_l_vendedorActionPerformed

    private void b_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_cancelarActionPerformed
        // Cerramos el Jdialog
        this.getContenedor().setVisible(false);
}//GEN-LAST:event_b_cancelarActionPerformed

    private void b_aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_aceptarActionPerformed
        accionAceptar();


}//GEN-LAST:event_b_aceptarActionPerformed

    private void t_factura1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_factura1ActionPerformed

    }//GEN-LAST:event_t_factura1ActionPerformed

    private void ltipo_devActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ltipo_devActionPerformed
        if (ltipo_dev.getSelectedItem() != null) {
            try {
                cargarTablaFormasPago();
            } catch (Exception ex) {
                java.util.logging.Logger.getLogger(JDevolucion.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_ltipo_devActionPerformed

    private void tb_formasPagoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tb_formasPagoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_TAB && evt.isShiftDown()) {
            tb_formasPago.transferFocusBackward();

        } else if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            tb_formasPago.transferFocus();
        }
    }//GEN-LAST:event_tb_formasPagoKeyPressed

    private void t_factura3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_factura3FocusLost
        // TODO add your handling code here:
        if (!t_factura1.getText().equals(VariablesAlm.getVariable(VariablesAlm.COD_ALMACEN))) {
            try {
                esOtroLocal = true;
                String numeroDocumento = t_factura1.getText() + "-" + t_factura2.getText() + "-" + Integer.parseInt(t_factura3.getText());
                documentoDTO = TicketsDao.consultarTicketOtroLocal(numeroDocumento);
                procesar = true;
                tienePendienteEntrega = false;
                for (ItemDTO item : documentoDTO.getItemDtoLista()) {
                    if (item.getRecogidaPosterior().equals("P")) {
                        tienePendienteEntrega = true;
                        break;
                    }
                }
                if (documentoDTO != null) {
                    for (MedioPagoDTO pagoDTO : documentoDTO.getMedioPagoLista()) {
                        pagoDTO.setCruzaEfectivo("NO");
                    }
                } else {
                    lb_error.setText("Error al conectar con otro local");
                    procesar = false;
                }
            } catch (Exception ex) {
                mensajeError = ex.getMessage();
                lb_error.setText(mensajeError);
                procesar = false;
                tienePendienteEntrega = false;
                cargarTablaFormasPago();
            }
        } else {
            esOtroLocal = false;
        }

    }//GEN-LAST:event_t_factura3FocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.comerzzia.jpos.gui.components.form.JButtonForm b_aceptar;
    private com.comerzzia.jpos.gui.components.form.JButtonForm b_cancelar;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox l_motivo;
    private javax.swing.JComboBox l_vendedor;
    private javax.swing.JLabel lb_error;
    private javax.swing.JLabel lb_vendedor;
    private javax.swing.JComboBox ltipo_dev;
    private com.comerzzia.jpos.servicios.login.Sesion sesion1;
    private com.comerzzia.jpos.gui.components.form.JTextFieldForm t_estado_mercaderia;
    private com.comerzzia.jpos.gui.components.form.JTextFieldForm t_factura1;
    private com.comerzzia.jpos.gui.components.form.JTextFieldForm t_factura2;
    private com.comerzzia.jpos.gui.components.form.JTextFieldForm t_factura3;
    private com.comerzzia.jpos.gui.components.form.JTextAreaForm t_observaciones;
    private javax.swing.JTable tb_formasPago;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    @Override
    public void accionAceptar() {
        try {
            validarFormulario();
            if (esOtroLocal) {
                if (procesar) {
                    documentoDTO.setTipoDevolucion(((TipoDevolucionDTO) ltipo_dev.getSelectedItem()) == null ? 1l : ((TipoDevolucionDTO) ltipo_dev.getSelectedItem()).getIdTipoDevolucion());
                    MotivoDevolucionDTO devolucionDTO = new MotivoDevolucionDTO(((MotivoDevolucion) l_motivo.getSelectedItem()).getIdMotivo(), ((MotivoDevolucion) l_motivo.getSelectedItem()).getDescripcionMotivo());
                    documentoDTO.setMotivoDevolucionDTO(devolucionDTO);
                    documentoDTO.setEstadoMercaderia(t_estado_mercaderia.getText());
                    documentoDTO.setObservacionNC(t_observaciones.getText());
                    documentoDTO.setUsuarioAutoriza(Sesion.getAutorizadorDevolucion());
                    if (!formasPago.isEmpty()) {
                        for (MedioPagoDTO pagoDTO : formasPago) {
                            if (pagoDTO.getCruzaEfectivo().equals("SI")) {
                                pagoDTO.setCruzaEfectivo("S");
                            } else if (pagoDTO.getCruzaEfectivo().equals("NO")) {
                                pagoDTO.setCruzaEfectivo("N");
                            }
                        }
                    } else {
                        documentoDTO.getMedioPagoLista().clear();
                    }
                    Sesion.setDocumentoDTO(documentoDTO);
                    ((JPrincipal) this.getVentana_padre()).addDevolucionesVentaOtroLocal();
                    this.getContenedor().setVisible(false);
                    ((JPrincipal) this.getVentana_padre()).showView("devoluciones-venta-otro-local");
                } else {
                    lb_error.setText(mensajeError);
                }
            } else {
                for (MedioPagoDTO pagoDTO : formasPago) {
                    if (pagoDTO.getCruzaEfectivo().equals("SI")) {
                        pagoDTO.setCruzaEfectivo("S");
                    } else if (pagoDTO.getCruzaEfectivo().equals("NO")) {
                        pagoDTO.setCruzaEfectivo("N");
                    }
                }                
                String msg = Sesion.iniciaNuevaDevolucion(t_factura1.getText(), t_factura2.getText(), t_factura3.getText(), (MotivoDevolucion) l_motivo.getSelectedItem(), t_estado_mercaderia.getText(), t_observaciones.getText(), (TipoDevolucionDTO) ltipo_dev.getSelectedItem(), formasPago, true);
                if (msg != null) {
                    addError(new ValidationFormException(msg));
                    return;
                }
                ((JPrincipal) this.getVentana_padre()).addDevolucionesVenta();
                this.getContenedor().setVisible(false);
                ((JPrincipal) this.getVentana_padre()).showView("devoluciones-venta");
            }

        } catch (ArticuloNotFoundException ex) {
            addError(new ValidationFormException("Error. No se encontraron todos los articulos en el sistema"));
        } catch (ValidationFormException ex) {
            addError(ex);
        } catch (NoResultException ex) {
            addError(new ValidationFormException("No existe la factura indicada o la factura está anulada."));
        } catch (Exception ex) {
            log.error("Error no controlado", ex);
            addError(new ValidationFormException("Error en la lectura del ticket"));
        }

    }

    @Override
    public void limpiarFormulario() {

        for (IValidableForm elem : formulario) {
            elem.setValidacionHabilitada(false);
        }

        for (IValidableForm elem : formulario) {
            elem.setText("");
        }
        l_motivo.setSelectedIndex(0);
        l_vendedor.setSelectedIndex(0);
        this.t_factura1.requestFocus();

        for (IValidableForm elem : formulario) {
            elem.setValidacionHabilitada(true);
        }

        this.lb_error.setText("");
    }

    private void crearFormulario() {
        // Elementos del formulario susceptibles de validarse o resetearse 
        formulario.add(t_factura2);
        formulario.add(t_factura3);
        formulario.add(t_estado_mercaderia);
        formulario.add(t_observaciones);
    }

    @Override
    public void addError(ValidationFormException e) {
        lb_error.setText(e.getMessage());
    }

    @Override
    public void clearError() {
        lb_error.setText("");
    }

    private void inicializaValidacion() {
        t_factura1.addValidador(new ValidadorObligatoriedad(), this);
        t_factura1.addValidador(new ValidadorTexto(3, true), this);
        t_factura2.addValidador(new ValidadorObligatoriedad(), this);
        t_factura2.addValidador(new ValidadorTexto(3, true), this);
        t_factura3.addValidador(new ValidadorObligatoriedad(), this);
        t_factura3.addValidador(new ValidadorTexto(9, true), this);

        t_estado_mercaderia.addValidador(new ValidadorTexto(100), this);
        t_estado_mercaderia.addValidador(new ValidadorObligatoriedad(), this);
        t_observaciones.addValidador(new ValidadorTexto(255), this);

    }

    private void validarFormulario() throws ValidationFormException {
        for (IValidableForm e : formulario) {
            try {
                e.validar();
            } catch (ValidationFormException ex) {
                throw ex;
            }
        }
        if (esOtroLocal && tienePendienteEntrega) {
            procesar = false;
            mensajeError = "La factura tiene artículos en Pendiente de Entrega";
        }
    }

    public void iniciaVista() {
        limpiarFormulario();
        t_factura1.requestFocus();
        ltipo_dev.setSelectedIndex(0);
        cargarTablaFormasPago();
        t_factura1.setText(VariablesAlm.getVariable(VariablesAlm.COD_ALMACEN));
        //t_factura2.requestFocus();
    }

    @Override
    public void accionLeerTarjetaVD() {
    }

    private void deshabilitaElementosSukasa() {
        lb_vendedor.setVisible(false);
        l_vendedor.setVisible(false);
    }

    private void cargarTablaFormasPago() {
        try {
            List<CajaDet> formasPagoTemp = new ArrayList<CajaDet>();
            if (((TipoDevolucionDTO) ltipo_dev.getSelectedItem()).getIdTipoDevolucion().equals(EnumTipoDevolucion.TIPO_CONSUMIR_NC.getValor())) {
                formasPago = new ArrayList<MedioPagoDTO>();
            } else if (!esOtroLocal) {
                if (!t_factura1.getText().isEmpty() && !t_factura2.getText().isEmpty() && !t_factura3.getText().isEmpty()) {
                    formasPagoTemp = new ArrayList<CajaDet>();
                    TicketsAlm factura = TicketsDao.consultarTicket(Long.parseLong(t_factura3.getText()), t_factura2.getText(), t_factura1.getText());
                    formasPagoTemp = GestionDeCajasDao.consultaDetalleMovimientos(factura.getUidTicket());
                    formasPago.clear();
                    for (CajaDet detalle : formasPagoTemp) {
                        formasPago.add(new MedioPagoDTO(detalle.getCodmedpag().getCodmedpag(), detalle.getCodmedpag().getDesmedpag(), detalle.getCargo(), "NO"));
                    }
                }
            } else {
                if (documentoDTO != null) {
                    formasPago.clear();
                    if (procesar) {
                        formasPago.addAll(documentoDTO.getMedioPagoLista());
                    }
                }
            }
            MostrarFormasPagoTableModel modeloReserva = new MostrarFormasPagoTableModel(formasPago);
            tb_formasPago.setModel(modeloReserva);
            tb_formasPago.setDefaultRenderer(Object.class, new MostrarFormasPagoCellRenderer());
            dibujarTablaFormasPago();

        } catch (Exception ex) {
            lb_error.setText("No existe la factura indicada o la factura está anulada.");
        }
    }

    private void dibujarTablaFormasPago() {
        tb_formasPago.getColumnModel().getColumn(0).setPreferredWidth(90);
        tb_formasPago.getColumnModel().getColumn(1).setPreferredWidth(75);
        tb_formasPago.getColumnModel().getColumn(2).setPreferredWidth(10);
    }

    private void addFunctionKeys() {

        log.info("Función de acciones de teclado");

        Acciones.crearAccionFocoTabla(this, tb_formasPago);

        tb_formasPago.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "Enter");
        tb_formasPago.getActionMap().put("Enter", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                accionEnter();
            }
        });
    }

    private void accionEnter() {
        try {
            int fila = tb_formasPago.getSelectedRow();
            MedioPagoDTO lto = formasPago.get(fila);
            if (lto.getCodMedPag().equals("11") && !esOtroLocal) {
                if (lto.getCruzaEfectivo() == "SI") {
                    lto.setCruzaEfectivo("NO");
                } else {
                    lto.setCruzaEfectivo("SI");
                }

                formasPago.set(fila, lto);

                MostrarFormasPagoTableModel modeloReserva = new MostrarFormasPagoTableModel(formasPago);
                refrescarTablaFormasPago(modeloReserva);
                tb_formasPago.setRowSelectionInterval(fila, fila);
                tb_formasPago.changeSelection(fila, 0, false, false);
            }
        } catch (IndexOutOfBoundsException e) {
            JPrincipal.getInstance().crearError("Debe de realizar una búsqueda antes de cambiar una línea de factura. ");
        } catch (Exception e) {
            log.error(e.getMessage(), e);
            JPrincipal.getInstance().crearError("Error cambiando el estado de las líneas.");
        }
    }

    private void refrescarTablaFormasPago(MostrarFormasPagoTableModel modeloReserva) {
        tb_formasPago.setModel(modeloReserva);
        tb_formasPago.getColumnModel().getColumn(0).setPreferredWidth(90);
        tb_formasPago.getColumnModel().getColumn(1).setPreferredWidth(75);
        tb_formasPago.getColumnModel().getColumn(2).setPreferredWidth(10);
    }
}
