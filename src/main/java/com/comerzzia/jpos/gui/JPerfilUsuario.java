/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JPerfilUsuario.java
 *
 * Created on 04-ago-2011, 8:23:12
 */
package com.comerzzia.jpos.gui;

import com.comerzzia.jpos.gui.components.JPanelImagenFondo;
import com.comerzzia.jpos.servicios.login.Sesion;
import com.comerzzia.jpos.servicios.core.usuarios.ServicioUsuarios;
import com.comerzzia.jpos.servicios.core.usuarios.UsuarioException;
import es.mpsistemas.util.criptografia.CriptoException;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.Arrays;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import com.comerzzia.jpos.gui.components.form.JTextFieldForm;
import com.comerzzia.jpos.servicios.core.variables.Variables;
import es.mpsistemas.util.log.Logger;
import javax.swing.KeyStroke;

/**
 *
 * @author MGRI
 */
public class JPerfilUsuario extends JPanelImagenFondo implements IVista, KeyListener {
    //Entero que indica el tipo de contraseña a modificar, contraseña larga si es 8 y contraseña corta si es 4.
    
    private static final Logger log = Logger.getMLogger(JPerfilUsuario.class);
    int tipoContraseña = 8;

    /** Creates new form JPerfi */
    public JPerfilUsuario() {
        super();
        initComponents();
    }
    JPrincipal ventana_padre = null;

    public JPerfilUsuario(JPrincipal ventana_padre) {
        super();
        try {
            String prefijo = Variables.getVariable(Variables.POS_UI_SKIN);
            URL myurl = this.getClass().getResource("/skin/" + prefijo + "/" + prefijo + "_login.png");

            this.setImagenFondo((Image) ImageIO.read(new File(myurl.getPath())));
        }
        catch (IOException ex) {
            log.error("Intentando obtener imagen de tema in pantalla Perfil de Usuario ");
        }
        this.ventana_padre = ventana_padre;
        initComponents();
        addFunctionKeys();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        usuarioBean1 = new com.comerzzia.jpos.persistencia.core.usuarios.UsuarioBean();
        jLabel1 = new javax.swing.JLabel();
        t_usuario = new com.comerzzia.jpos.gui.components.form.JTextFieldForm();
        jLabel7 = new javax.swing.JLabel();
        t_id = new com.comerzzia.jpos.gui.components.form.JTextFieldForm();
        p_principal = new javax.swing.JPanel();
        p_cambiar_clave = new javax.swing.JPanel();
        t_contr_actual = new com.comerzzia.jpos.gui.components.form.JPasswordFieldForm();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        t_nueva_contr = new com.comerzzia.jpos.gui.components.form.JPasswordFieldForm();
        t_repetir_contr = new com.comerzzia.jpos.gui.components.form.JPasswordFieldForm();
        jLabel4 = new javax.swing.JLabel();
        b_cambiar_contr = new com.comerzzia.jpos.gui.components.form.JButtonForm();
        menu_navegacion = new javax.swing.JPanel();
        b_m_cambiar_clave = new com.comerzzia.jpos.gui.components.form.JButtonForm();
        b_m_cambiar_clave1 = new com.comerzzia.jpos.gui.components.form.JButtonForm();
        b_m_menu_principal = new com.comerzzia.jpos.gui.components.form.JButtonForm();

        setMaximumSize(new java.awt.Dimension(1024, 723));
        setMinimumSize(new java.awt.Dimension(1024, 723));
        setOpaque(false);
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setForeground(new java.awt.Color(0, 102, 255));
        jLabel1.setText("Descripción:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 310, -1, -1));

        t_usuario.setEditable(false);
        t_usuario.setFocusable(false);
        t_usuario.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        add(t_usuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 300, 180, -1));

        jLabel7.setForeground(new java.awt.Color(0, 102, 255));
        jLabel7.setText("Usuario:");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 270, -1, -1));

        t_id.setEditable(false);
        t_id.setFocusable(false);
        t_id.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        add(t_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 260, 180, -1));

        p_principal.setOpaque(false);
        p_principal.setLayout(new java.awt.CardLayout());

        p_cambiar_clave.setOpaque(false);
        p_cambiar_clave.setPreferredSize(new java.awt.Dimension(470, 440));

        t_contr_actual.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        t_contr_actual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_contr_actualActionPerformed(evt);
            }
        });

        jLabel2.setDisplayedMnemonic('c');
        jLabel2.setLabelFor(t_contr_actual);
        jLabel2.setText("Contraseña actual:");

        jLabel3.setDisplayedMnemonic('n');
        jLabel3.setLabelFor(t_nueva_contr);
        jLabel3.setText("Nueva Contraseña:");

        t_nueva_contr.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        t_nueva_contr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_nueva_contrActionPerformed(evt);
            }
        });

        t_repetir_contr.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        t_repetir_contr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_repetir_contrActionPerformed(evt);
            }
        });

        jLabel4.setDisplayedMnemonic('r');
        jLabel4.setLabelFor(t_repetir_contr);
        jLabel4.setText("Repetir Contraseña:");

        b_cambiar_contr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/comerzzia/jpos/imagenes/iconos/aceptar.png"))); // NOI18N
        b_cambiar_contr.setMnemonic('a');
        b_cambiar_contr.setText("Aceptar");
        b_cambiar_contr.setNextFocusableComponent(t_contr_actual);
        b_cambiar_contr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_cambiar_contrActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout p_cambiar_claveLayout = new javax.swing.GroupLayout(p_cambiar_clave);
        p_cambiar_clave.setLayout(p_cambiar_claveLayout);
        p_cambiar_claveLayout.setHorizontalGroup(
            p_cambiar_claveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_cambiar_claveLayout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addGroup(p_cambiar_claveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, p_cambiar_claveLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(p_cambiar_claveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(b_cambiar_contr, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t_repetir_contr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, p_cambiar_claveLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(t_nueva_contr, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, p_cambiar_claveLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(t_contr_actual, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(129, Short.MAX_VALUE))
        );
        p_cambiar_claveLayout.setVerticalGroup(
            p_cambiar_claveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p_cambiar_claveLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(p_cambiar_claveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(t_contr_actual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(p_cambiar_claveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(t_nueva_contr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(p_cambiar_claveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(t_repetir_contr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(b_cambiar_contr, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(208, 208, 208))
        );

        p_principal.add(p_cambiar_clave, "p_clave");

        add(p_principal, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 350, 470, 220));

        menu_navegacion.setBackground(new java.awt.Color(255, 255, 255));
        menu_navegacion.setOpaque(false);

        b_m_cambiar_clave.setText("<html><center> Cambiar Contraseña<br/>F2</cente></html>");
        b_m_cambiar_clave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_m_cambiar_claveActionPerformed(evt);
            }
        });

        b_m_cambiar_clave1.setText("<html><center> Cambiar Contraseña Corta<br/>F3</cente></html>");
        b_m_cambiar_clave1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_m_cambiar_clave1ActionPerformed(evt);
            }
        });

        b_m_menu_principal.setText("<html><center>Menú Principal <br/>F12</center></html>");
        b_m_menu_principal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_m_menu_principalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout menu_navegacionLayout = new javax.swing.GroupLayout(menu_navegacion);
        menu_navegacion.setLayout(menu_navegacionLayout);
        menu_navegacionLayout.setHorizontalGroup(
            menu_navegacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, menu_navegacionLayout.createSequentialGroup()
                .addComponent(b_m_cambiar_clave, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(b_m_cambiar_clave1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(b_m_menu_principal, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        menu_navegacionLayout.setVerticalGroup(
            menu_navegacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(b_m_menu_principal, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(b_m_cambiar_clave1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(b_m_cambiar_clave, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        add(menu_navegacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 490, 350, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void b_m_menu_principalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_m_menu_principalActionPerformed
        if (Sesion.getUsuario().isClaveCaducada() || Sesion.getUsuario().isClaveCortaCaducada() || Sesion.getUsuario().isPrimerAcceso()) {
            String msg = Sesion.getUsuario().getMensajeClaveCaducada();
            ventana_padre.crearAdvertencia(msg);
        }
        else {
            ventana_padre.mostrarMenu();
        }
}//GEN-LAST:event_b_m_menu_principalActionPerformed

    private void b_cambiar_contrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_cambiar_contrActionPerformed
        String vPassword = "";
        String vPasswordNuevo = "";
        if (t_nueva_contr.getPassword().length >= tipoContraseña) {
            if (Arrays.equals(t_nueva_contr.getPassword(), t_repetir_contr.getPassword())) {
                try {
                    log.debug("Acción de cambio de contraseña");
                    vPassword = new String(t_contr_actual.getPassword());
                    if (tipoContraseña == 8) {
                        if (Sesion.getUsuario().isClaveCorrecta(vPassword)) {
                            vPasswordNuevo = Sesion.getUsuario().claveCandidataValidaString(t_nueva_contr.getPassword());
                            if (vPasswordNuevo != null) {
                                Sesion.getUsuario().cambiarClave(vPasswordNuevo);
                                ServicioUsuarios.cambiarClaveUsuario(Sesion.getUsuario());
                                setVisibleCambioPassword(false);
                                setVisibleMenu(true);
                                addFunctionKeys();
                                ventana_padre.crearConfirmacion("Su clave se ha cambiado con éxito!!!");
                                log.debug("La contraseña ha sido cambiada correctamente.");
                            }
                            else {
                                ventana_padre.crearError("Debe introducir una contraseña distinta de las dos anteriores");
                                log.debug("Debe introducir una contraseña distinta de las dos anteriores");
                            }
                        }
                        else {
                            ventana_padre.crearError("La contraseña introducida no se corresponde con la contraseña actual del usuario");
                            log.debug("La contraseña introducida no se corresponde con la contraseña actual del usuario");
                        }
                    }
                    else if (tipoContraseña == 4) {
                        if (Sesion.getUsuario().isClaveCortaCorrecta(vPassword)) {
                            vPasswordNuevo = Sesion.getUsuario().claveCortaCandidataValidaString(t_nueva_contr.getPassword());
                            if (vPasswordNuevo != null) {
                                Sesion.getUsuario().cambiarClaveCorta(vPasswordNuevo);
                                ServicioUsuarios.cambiarClaveUsuario(Sesion.getUsuario());
                                setVisibleCambioPassword(false);
                                setVisibleMenu(true);
                                addFunctionKeys();
                                ventana_padre.crearConfirmacion("Su clave se ha cambiado con éxito!!!");
                                log.debug("La contraseña ha sido cambiada correctamente.");
                            }
                            else {
                                ventana_padre.crearError("Debe introducir una contraseña distinta de las dos anteriores");
                                log.debug("Debe introducir una contraseña distinta de las dos anteriores");
                            }
                        }
                        else {
                            ventana_padre.crearError("La contraseña introducida no se corresponde con la contraseña actual del usuario");
                            log.debug("La contraseña introducida no se corresponde con la contraseña actual del usuario");
                        }
                    }

                }
                catch (CriptoException ex) {
                    log.error("Excepción criptográfica al cambiar la contraseña");
                }
                catch (UsuarioException ex) {
                    log.debug("Excepción para pantalla al cabiar la contraseña del usuario: "+ex.getMessage());
                    ventana_padre.crearError(ex.getMessage());
                }
                catch (Exception ex) {
                    log.debug("Excepción para pantalla al cabiar la contraseña del usuario: "+ex.getMessage());
                    ventana_padre.crearError("No se pudo cambiar la contraseña de usuario");
                }
            }
            else {
                ventana_padre.crearError("Los campos nueva contraseña y repetir contraseña no concuerdan");
            }
        }
        else {
            ventana_padre.crearError("La contraseña ha de tener una longitud mínima de " + tipoContraseña + " caracteres");
        }
}//GEN-LAST:event_b_cambiar_contrActionPerformed

    private void b_m_cambiar_claveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_m_cambiar_claveActionPerformed
        // CardLayout cl = (CardLayout)(p_principal.getLayout());        
        // cl.show(p_principal, "p_clave"); 
        tipoContraseña = 8;
        removeFunctionKeys();
        setVisibleMenu(false);
        setVisibleCambioPassword(true);
        t_contr_actual.requestFocus(true);

    }//GEN-LAST:event_b_m_cambiar_claveActionPerformed

    private void b_m_cambiar_clave1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_m_cambiar_clave1ActionPerformed
        tipoContraseña = 4;
        removeFunctionKeys();
        setVisibleMenu(false);
        setVisibleCambioPassword(true);
        t_contr_actual.requestFocus(true);
    }//GEN-LAST:event_b_m_cambiar_clave1ActionPerformed

private void t_contr_actualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_contr_actualActionPerformed
    ((JTextFieldForm) evt.getSource()).transferFocus();

}//GEN-LAST:event_t_contr_actualActionPerformed

private void t_nueva_contrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_nueva_contrActionPerformed
    ((JTextFieldForm) evt.getSource()).transferFocus();
}//GEN-LAST:event_t_nueva_contrActionPerformed

private void t_repetir_contrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_repetir_contrActionPerformed
    b_cambiar_contrActionPerformed(evt);
}//GEN-LAST:event_t_repetir_contrActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.comerzzia.jpos.gui.components.form.JButtonForm b_cambiar_contr;
    private com.comerzzia.jpos.gui.components.form.JButtonForm b_m_cambiar_clave;
    private com.comerzzia.jpos.gui.components.form.JButtonForm b_m_cambiar_clave1;
    private com.comerzzia.jpos.gui.components.form.JButtonForm b_m_menu_principal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel menu_navegacion;
    private javax.swing.JPanel p_cambiar_clave;
    private javax.swing.JPanel p_principal;
    private com.comerzzia.jpos.gui.components.form.JPasswordFieldForm t_contr_actual;
    private com.comerzzia.jpos.gui.components.form.JTextFieldForm t_id;
    private com.comerzzia.jpos.gui.components.form.JPasswordFieldForm t_nueva_contr;
    private com.comerzzia.jpos.gui.components.form.JPasswordFieldForm t_repetir_contr;
    private com.comerzzia.jpos.gui.components.form.JTextFieldForm t_usuario;
    private com.comerzzia.jpos.persistencia.core.usuarios.UsuarioBean usuarioBean1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void iniciaVista() {
        t_usuario.setText(Sesion.getUsuario().getDesUsuario());
        t_id.setText(Sesion.getUsuario().getUsuario());
        setVisibleCambioPassword(false);
        setVisibleMenu(true);
    }

    private void setVisibleCambioPassword(boolean visible) {
        p_cambiar_clave.setVisible(visible);
        jLabel2.setVisible(visible);
        jLabel3.setVisible(visible);
        jLabel4.setVisible(visible);
        t_nueva_contr.setVisible(visible);
        t_contr_actual.setVisible(visible);
        t_repetir_contr.setVisible(visible);
        b_cambiar_contr.setVisible(visible);
        if (visible) {
            t_nueva_contr.setText("");
            t_contr_actual.setText("");
            t_repetir_contr.setText("");
        }

    }

    private void setVisibleMenu(boolean visible) {
        menu_navegacion.setVisible(visible);
        b_m_cambiar_clave.setVisible(visible);
        b_m_cambiar_clave1.setVisible(visible);
        b_m_menu_principal.setVisible(visible);

    }

    @Override
    public void keyTyped(KeyEvent ke) {
    }

    @Override
    public void keyPressed(KeyEvent ke) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void keyReleased(KeyEvent ke) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
/*
    private void addHotKey(KeyStroke keyStroke, String inputActionKey, Action listener) {
        ActionMap actionMap = this.getActionMap();
        InputMap inputMap = this.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap.put(keyStroke, inputActionKey);
        actionMap.put(inputActionKey, listener);
    }
*/
    private void addFunctionKeys() {
        // ENTER EN LOS BOTONES
        addHotKey(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "EnterBotones", listenerEnter);
        
        KeyStroke esc = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
        Action listeneresc = new AbstractAction() {

            public void actionPerformed(ActionEvent ae) {
                addFunctionKeys();
                setVisibleCambioPassword(false);
                setVisibleMenu(true);
            }
        };
        addHotKey(esc, "IdentClientesc", listeneresc);

        KeyStroke f2 = KeyStroke.getKeyStroke(KeyEvent.VK_F2, 0);
        Action listenerf2 = new AbstractAction() {

            public void actionPerformed(ActionEvent ae) {
                b_m_cambiar_claveActionPerformed(ae);
            }
        };
        addHotKey(f2, "IdentClientf2", listenerf2);

        KeyStroke f3 = KeyStroke.getKeyStroke(KeyEvent.VK_F3, 0);
        Action listenerf3 = new AbstractAction() {

            public void actionPerformed(ActionEvent ae) {
                b_m_cambiar_clave1ActionPerformed(ae);
            }
        };
        addHotKey(f3, "IdentClientf3", listenerf3);

        KeyStroke f12 = KeyStroke.getKeyStroke(KeyEvent.VK_F12, 0);
        Action listenerf12 = new AbstractAction() {

            public void actionPerformed(ActionEvent ae) {
                b_m_menu_principalActionPerformed(ae);
            }
        };
        addHotKey(f12, "IdentClientf12", listenerf12);


    }

    private void removeFunctionKeys() {
        KeyStroke f2 = KeyStroke.getKeyStroke(KeyEvent.VK_F2, 0);
        KeyStroke f3 = KeyStroke.getKeyStroke(KeyEvent.VK_F3, 0);
        KeyStroke f12 = KeyStroke.getKeyStroke(KeyEvent.VK_F12, 0);
        removeHotKey(f2, "IdentClientF2");
        removeHotKey(f3, "IdentClientF3");
        removeHotKey(f12, "IdentClientF12");
    }

    private void removeHotKey(KeyStroke keyStroke, String inputActionKey) {
        ActionMap actionMap = this.getActionMap();
        InputMap inputMap = this.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap.remove(keyStroke);
        actionMap.remove(inputActionKey);
    }
    @Override
    public void iniciaFoco() {
        log.info("Iniciando Foco");
       
    }
}
