/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JConfirmacion.java
 *
 * Created on 29-agosto-2011, 10:34:11
 */
package com.comerzzia.jpos.gui;

import com.comerzzia.jpos.gui.components.JPanelImagenFondo;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.KeyStroke;

/**
 * Clase para tratar los errores de la aplicación. Puede contener la lógica para registrar diferentes actividades que el cliente desee monitorizar
 * @author MGRI
 */
public class JConfirmacion extends JPanelImagenFondo {

    //Constantes

    private JDialog contenedor;
    private String desError;
    private boolean aceptado = false;

    /** Creates new form JConfirmacion */
    public JConfirmacion() {
        super();
        inicio();
        initComponents();
        addFunctionKeys();
        registraEventoEnterBoton();
        //this.setVisible(true);
    }

    public JConfirmacion(JDialog contenedor, String desError) {
        super();
        inicio();
        initComponents();
        this.contenedor = contenedor;
        registraEventoEnterBoton();

        if (desError == null || desError.equals("")) {
            desError = " Se ha producido un error en la aplicación ";
        }

        l_error.setText(desError);
        //this.setVisible(true);
    }

    public void iniciaVista(){
        b_ok.requestFocus();
    }
    
    private void inicio() {
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        i_error = new javax.swing.JLabel();
        l_error = new com.comerzzia.jpos.gui.components.JMultilineLabel();
        b_ok = new com.comerzzia.jpos.gui.components.form.JButtonForm();
        b_cancelar = new com.comerzzia.jpos.gui.components.form.JButtonForm();

        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        i_error.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/comerzzia/jpos/imagenes/mensajes/interrogacion_p.png"))); // NOI18N
        add(i_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 60, 50));

        l_error.setBackground(new java.awt.Color(204, 255, 255));
        l_error.setFont(l_error.getFont().deriveFont(l_error.getFont().getSize()+2f));
        l_error.setMaximumSize(null);
        add(l_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, 430, 70));

        b_ok.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/comerzzia/jpos/imagenes/iconos/aceptar.png"))); // NOI18N
        b_ok.setMnemonic('a');
        b_ok.setText("Aceptar");
        b_ok.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        b_ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_okActionPerformed(evt);
            }
        });
        add(b_ok, new org.netbeans.lib.awtextra.AbsoluteConstraints(119, 90, 150, 33));

        b_cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/comerzzia/jpos/imagenes/iconos/cancelar.png"))); // NOI18N
        b_cancelar.setText("Cancelar");
        b_cancelar.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        b_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_cancelarActionPerformed(evt);
            }
        });
        add(b_cancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 90, 150, 33));
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
       // Acción enter era aceptar por defecto antes de que se asignasen a los botones
        /*if (evt.getKeyChar() == '\n') {
            accionAceptar();
        }*/
    }//GEN-LAST:event_formKeyTyped

    private void b_okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_okActionPerformed

        accionAceptar();
}//GEN-LAST:event_b_okActionPerformed

    private void b_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_cancelarActionPerformed
        accionCancelar();
}//GEN-LAST:event_b_cancelarActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.comerzzia.jpos.gui.components.form.JButtonForm b_cancelar;
    private com.comerzzia.jpos.gui.components.form.JButtonForm b_ok;
    private javax.swing.JLabel i_error;
    private com.comerzzia.jpos.gui.components.JMultilineLabel l_error;
    // End of variables declaration//GEN-END:variables

    public JDialog getContenedor() {
        return contenedor;
    }

    public void setContenedor(JDialog contenedor) {
        this.contenedor = contenedor;
    }

    public String getDesError() {
        return desError;
    }

    /** Establece el mensaje de confirmación
     * 
     * @param desError 
     */
    public void setDesError(String desError) {
        this.aceptado = false;
        if (desError == null || desError.equals("")) {
            desError = " Se ha producido un error en la aplicación ";
        }
        this.desError = desError;
        l_error.setText(desError);
    }



    @Override
    protected void addHotKey(KeyStroke keyStroke, String inputActionKey, Action listener) {
        ActionMap actionMap = this.getActionMap();
        InputMap inputMap = this.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap.put(keyStroke, inputActionKey);
        actionMap.put(inputActionKey, listener);
    }

    private void addFunctionKeys() {
        KeyStroke esc = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
        Action listeneresc = new AbstractAction() {

            public void actionPerformed(ActionEvent ae) {
                accionCancelar();
            }
        };
        addHotKey(esc, "IdentClientesc", listeneresc);
        /*
        KeyStroke enter = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0);
        Action listenerenter = new AbstractAction() {

            public void actionPerformed(ActionEvent ae) {
                accionAceptar();
            }
        };
        addHotKey(enter, "IdentCliententer", listenerenter);
         */
    }

    public boolean isAceptado() {
        return aceptado;
    }

    public void setAceptado(boolean aceptado) {
        this.aceptado = aceptado;
    }

    /** Accion de aceptar
     */
    private void accionAceptar() {
        aceptado = true;
        contenedor.setVisible(false);
    }

    /** Accion de cancelar
     */
    private void accionCancelar() {
        aceptado = false;
        contenedor.setVisible(false);
    }

    public void cambiaTextoBotones(String textoConfirmacion, String textoCancelacion) {
        b_ok.setText(textoConfirmacion);
        b_cancelar.setText(textoCancelacion);
    }
}
