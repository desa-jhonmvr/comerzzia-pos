/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * JPagosNotaCredito.java
 *
 * Created on 17-sep-2011, 10:15:57
 */
package com.comerzzia.jpos.gui;

import com.comerzzia.jpos.entity.db.Cliente;
import com.comerzzia.jpos.entity.db.LogOperaciones;
import com.comerzzia.jpos.entity.db.NotasCredito;
import com.comerzzia.jpos.servicios.tickets.componentes.PagosTicket;
import com.comerzzia.jpos.gui.components.JPanelImagenFondo;
import com.comerzzia.jpos.gui.validation.IViewerValidationFormError;
import com.comerzzia.jpos.gui.validation.ValidadorTexto;
import com.comerzzia.jpos.gui.validation.ValidationFormException;
import com.comerzzia.jpos.persistencia.logs.logacceso.LogException;
import com.comerzzia.jpos.servicios.core.permisos.Operaciones;
import com.comerzzia.jpos.servicios.core.permisos.SinPermisosException;
import com.comerzzia.jpos.servicios.core.variables.VariablesAlm;
import com.comerzzia.jpos.servicios.devoluciones.DevolucionesServices;
import com.comerzzia.jpos.servicios.devoluciones.NotaCreditoException;
import com.comerzzia.jpos.servicios.login.Sesion;
import com.comerzzia.jpos.servicios.logs.logsacceso.ServicioLogAcceso;
import es.mpsistemas.util.fechas.Fecha;
import es.mpsistemas.util.log.Logger;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.util.Date;
import java.util.logging.Level;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JDialog;
import javax.swing.KeyStroke;

/**
 *
 * @author Admin
 */
public class JPagosNotaCredito extends JPanelImagenFondo implements IViewerValidationFormError {

    private static Logger log = Logger.getMLogger(JPagosNotaCredito.class);
    //private JPagos ventanaPadre;
    private JDialog contenedor;
    private NotasCredito notasCredito = null;
    private boolean desdeReservaciones = false;
    private Cliente cliente = new Cliente();
    private PagosTicket pagosReservaciones = null;

    /**
     * Creates new form JPagosNotaCredito
     */
    public JPagosNotaCredito() {
        super();
        initComponents();
        super.registraEventoEnterBoton();

        KeyStroke esc = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
        Action listeneresc = new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                contenedor.setVisible(false);
            }
        };
        addHotKey(esc, "IdentClientesc", listeneresc);

        //t_codAlm.addValidador(new ValidadorEntero(), this);
        t_codAlm.addValidador(new ValidadorTexto(3, true), this);
        t_codCaja.addValidador(new ValidadorTexto(3, true), this);
        t_idNotaCredito.addValidador(new ValidadorTexto(9, true), this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jb_ok1 = new com.comerzzia.jpos.gui.components.form.JButtonForm();
        t_codAlm = new com.comerzzia.jpos.gui.components.form.JTextFieldForm();
        t_codCaja = new com.comerzzia.jpos.gui.components.form.JTextFieldForm();
        t_idNotaCredito = new com.comerzzia.jpos.gui.components.form.JTextFieldForm();
        jError = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(440, 152));
        setMinimumSize(new java.awt.Dimension(440, 152));

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 0, 14));
        jLabel1.setText("Nota de Cr√©dito");

        jLabel2.setText("-");

        jLabel3.setText("-");

        jb_ok1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/comerzzia/jpos/imagenes/iconos/aceptar.png"))); // NOI18N
        jb_ok1.setMnemonic('a');
        jb_ok1.setText("Aceptar");
        jb_ok1.setFont(new java.awt.Font("Tahoma", 0, 18));
        jb_ok1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_ok1ActionPerformed(evt);
            }
        });
        jb_ok1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jb_ok1KeyPressed(evt);
            }
        });

        t_codAlm.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        t_codAlm.setFont(new java.awt.Font("Tahoma", 0, 14));
        t_codAlm.setName("total"); // NOI18N
        t_codAlm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_codAlmActionPerformed(evt);
            }
        });

        t_codCaja.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        t_codCaja.setFont(new java.awt.Font("Tahoma", 0, 14));
        t_codCaja.setName("total"); // NOI18N
        t_codCaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_codCajaActionPerformed(evt);
            }
        });

        t_idNotaCredito.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        t_idNotaCredito.setFont(new java.awt.Font("Tahoma", 0, 14));
        t_idNotaCredito.setName("total"); // NOI18N
        t_idNotaCredito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_idNotaCreditoActionPerformed(evt);
            }
        });

        jError.setFont(new java.awt.Font("Comic Sans MS", 1, 12));
        jError.setForeground(new java.awt.Color(255, 0, 51));
        jError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(178, 178, 178))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(jb_ok1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(t_codAlm, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(t_codCaja, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(t_idNotaCredito, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(85, 85, 85))
                    .addComponent(jError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jError, javax.swing.GroupLayout.DEFAULT_SIZE, 17, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(t_idNotaCredito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(t_codCaja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(t_codAlm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jb_ok1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
    }// </editor-fold>//GEN-END:initComponents

private void jb_ok1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_ok1ActionPerformed
    if (!t_codAlm.getText().equals("") && !t_codCaja.equals("") && !t_idNotaCredito.getText().equals("")) {

        try {
            // if (Sesion.getTicket().getPagos().contieneNotaCredito(t_codAlm.getText()+"-"+ t_codCaja.getText()+"-"+t_idNotaCredito.getText())){
            // log.debug("La nota de credito ya ha sido usada en este pago");
            //    jError.setText("La nota de credito ya ha sido usada en este pago"); 
            /* }
            else{*/
            notasCredito = DevolucionesServices.consultarNotaCredito(t_codAlm.getText(), t_codCaja.getText(), Long.parseLong(t_idNotaCredito.getText()), desdeReservaciones);
            Fecha valida = new Fecha(notasCredito.getFechaValidez());
            valida.sumaDias(1);
            Fecha hoy = new Fecha();
            if (hoy.despues(valida)) {
                log.debug("La nota cr√©dito est√° caducada.");
                contenedor.setVisible(false);
                JPrincipal.getInstance().compruebaAutorizacion(Operaciones.AUTORIZAR_MEDIO_PAGO, "La nota de cr√©dito est√° caducada");
            }

            // Tenemos que comprobar que no se haya usado ya la nota de cr√©dito
            // En Reservaciones no tenemos los pagos del ticket en sesi√≥n y no lo 
            // podemos verificar dentro de DevolucionesServices
            if (notasCredito.getAnulado() == 'S') {
                jError.setText("La nota de cr√©dito est√° anulada");
                contenedor.setVisible(true);
            } else if (notasCredito.getNotaCredito().length == 0) {
                //Cuando no existe el archivo BLOB
                jError.setText("No existe la informaci√≥n correcta.  ");
                log.error("El documento no tiene el archivo BLOB, verificar si el documento ingresado corresponde a documentos migrados.  ");
                contenedor.setVisible(true);
            } else {
                if (desdeReservaciones) {
                    // Comprobar que no se ha usado ya la nota de cr√©dito
                    if (pagosReservaciones != null && pagosReservaciones.contieneNotaCredito(notasCredito.getUidNotaCredito())) {
                        log.debug("La nota de credito ya se ha usado en el pago actual.");
                        throw new NotaCreditoException("La nota de credito ya se ha usado en el pago actual.");
                    }
                }

                if (notasCredito.getFechaValidez().before(new Date())) {
//                    jError.setText("La nota de cr√©dito no se encuentra en periodo de validez");
                    String msg = "La nota de cr√©dito esta caducada. ¬ø Desea Continuar ?";
                    boolean aceptado;
                    aceptado = JPrincipal.getInstance().crearVentanaConfirmacion(msg, "Si", "No");
                    if (!aceptado) {
                        throw new SinPermisosException();
                    }
                    String autorizador = JPrincipal.getInstance().compruebaAutorizacionNotaCredito(Operaciones.AUTORIZA_NOTACREDITO_CADUCADA);
                    Sesion.setAutorizadorConsumoNC(autorizador);
                    if (autorizador != null) {
                        LogOperaciones logAutorizacionNc = new LogOperaciones();
                        logAutorizacionNc = new LogOperaciones(VariablesAlm.getVariable(VariablesAlm.COD_ALMACEN), Sesion.getDatosConfiguracion().getCodcaja());
                        logAutorizacionNc.setFechaHora(new Date());
                        logAutorizacionNc.setUsuario(Sesion.getUsuario().getUsuario());
                        logAutorizacionNc.setReferencia(notasCredito.getUidNotaCredito());
                        logAutorizacionNc.setProcesado('N');
                        logAutorizacionNc.setAutorizador(Sesion.getAutorizadorConsumoNC());
                        logAutorizacionNc.setCodOperacion(ServicioLogAcceso.LOG_AUTORIZA_FECHA_CADUCADA);
                        insertarLog(logAutorizacionNc);
                        if (Sesion.getTicket() != null) {
                            if (!notasCredito.getCodcli().equals(Sesion.getTicket().getCliente().getCodcli())) {
                                jError.setText("La nota de cr√©dito emitida no pertenece al cliente.");
                                contenedor.setVisible(true);
                            } else if (notasCredito.getSaldo().compareTo(BigDecimal.ZERO) == 0) {
                                jError.setText("La nota de cr√©dito no tiene saldo");
                                contenedor.setVisible(true);
                            } else {
                                this.contenedor.setVisible(false);
                            }
                        } else if (Sesion.getPlasticoBean() != null) {
                            if (!notasCredito.getCodcli().equals(Sesion.getPlasticoBean().getCliente().getCodcli())) {
                                jError.setText("La nota de cr√©dito emitida no pertenece al cliente.");
                                contenedor.setVisible(true);
                            } else if (notasCredito.getSaldo().compareTo(BigDecimal.ZERO) == 0) {
                                jError.setText("La nota de cr√©dito no tiene saldo");
                                contenedor.setVisible(true);
                            } else {
                                this.contenedor.setVisible(false);
                            }
                        }
                    } else {
                        this.contenedor.setVisible(true);
                    }
//                    } 
//                    else {
//                        this.contenedor.setVisible(true);
//                    }
                } else if (Sesion.getTicket() != null) {
                    if (!notasCredito.getFactDocumento().equals(Sesion.getTicket().getCliente().getCodcli())) {
//                        if (!notasCredito.getCodcli().equals(Sesion.getTicket().getCliente().getCodcli())) {
                            jError.setText("La nota de cr√©dito emitida no pertenece al cliente. Factura");
                            contenedor.setVisible(true);
//                        } else {
//                            if (notasCredito.getSaldo().compareTo(BigDecimal.ZERO) == 0) {
//                                jError.setText("La nota de cr√©dito no tiene saldo");
//                                contenedor.setVisible(true);
//                            } else {
//                                notasCredito.setCliProceso(cliente.getCodcli());
//                                this.contenedor.setVisible(false);
//                            }
//                        }
                    } else {
                        if (notasCredito.getSaldo().compareTo(BigDecimal.ZERO) == 0) {
                            jError.setText("La nota de cr√©dito no tiene saldo");
                            contenedor.setVisible(true);
                        } else {
                            notasCredito.setCliProceso(cliente.getCodcli());
                            this.contenedor.setVisible(false);
                        }
                    }
                } else if (cliente.getCodcli() != null) {
                    if (!notasCredito.getCodcli().equals(cliente.getCodcli())) {
                        jError.setText("La nota de cr√©dito emitida no pertenece al cliente. ");
                        contenedor.setVisible(true);
                    } else {
                        if (notasCredito.getSaldo().compareTo(BigDecimal.ZERO) == 0) {
                            jError.setText("La nota de cr√©dito no tiene saldo");
                            contenedor.setVisible(true);
                        } else {
                            notasCredito.setCliProceso(cliente.getCodcli());
                            this.contenedor.setVisible(false);
                        }
                    }
                }

            }
        } catch (NotaCreditoException ex) {
            log.error("Error al realizar pago con nota de credito: " + ex.getMessage());
            jError.setText(ex.getMessage());
            contenedor.setVisible(true);
        } catch (SinPermisosException ex) {
            notasCredito = null;
            log.error("La nota de cr√©dito est√° caducada: No tiene permisos para consumirla");
            jError.setText("La nota de cr√©dito est√° caducada.");
            contenedor.setVisible(true);
        } catch (LogException ex) {
            java.util.logging.Logger.getLogger(JPagosNotaCredito.class.getName()).log(Level.SEVERE, null, ex);
        }
    } else {
        //log.debug("No se puede realizar selecci√≥n con campos vac√≠os.");
        jError.setText("No se puede realizar selecci√≥n con campos vac√≠os.");
    }
}//GEN-LAST:event_jb_ok1ActionPerformed

private void jb_ok1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jb_ok1KeyPressed
}//GEN-LAST:event_jb_ok1KeyPressed

private void t_codAlmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_codAlmActionPerformed
}//GEN-LAST:event_t_codAlmActionPerformed

private void t_codCajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_codCajaActionPerformed

}//GEN-LAST:event_t_codCajaActionPerformed

private void t_idNotaCreditoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_idNotaCreditoActionPerformed

}//GEN-LAST:event_t_idNotaCreditoActionPerformed

    public JDialog getContenedor() {
        return contenedor;
    }

    public void setContenedor(JDialog contenedor) {
        this.contenedor = contenedor;
    }

    public void insertarLog(LogOperaciones logImpresiones) throws LogException {
        EntityManagerFactory emf = Sesion.getEmf();
        EntityManager em = emf.createEntityManager();
        em.getTransaction().begin();
        ServicioLogAcceso.crearAccesoLog(logImpresiones, em);
        em.getTransaction().commit();
    }

    /*
    public JPagos getVentanaPadre() {
    return ventanaPadre;
    }
    
    public void setVentanaPadre(JPagos ventanaPadre) {
    this.ventanaPadre = ventanaPadre;
    }
     */
    public NotasCredito getNotasCredito() {
        return notasCredito;
    }

    void setNotasCredito(NotasCredito consultarNotaCredito) {
        notasCredito = consultarNotaCredito;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jError;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private com.comerzzia.jpos.gui.components.form.JButtonForm jb_ok1;
    private com.comerzzia.jpos.gui.components.form.JTextFieldForm t_codAlm;
    private com.comerzzia.jpos.gui.components.form.JTextFieldForm t_codCaja;
    private com.comerzzia.jpos.gui.components.form.JTextFieldForm t_idNotaCredito;
    // End of variables declaration//GEN-END:variables

    public void resetearDatos() {
        notasCredito = null;
        jError.setText("");
        t_codAlm.setText("");
        t_codCaja.setText("");
        t_idNotaCredito.setText("");
        t_codAlm.requestFocus();
    }

    @Override
    public void addError(ValidationFormException e) {
        jError.setText(e.getMessage());
    }

    @Override
    public void clearError() {
        jError.setText("");
    }

    /**
     * @return the desdeReservaciones
     */
    public boolean isDesdeReservaciones() {
        return desdeReservaciones;
    }

    /**
     * @param desdeReservaciones the desdeReservaciones to set
     */
    public void setDesdeReservaciones(boolean desdeReservaciones) {
        this.desdeReservaciones = desdeReservaciones;
    }

    /**
     * @return the pagosReservaciones
     */
    public PagosTicket getPagosReservaciones() {
        return pagosReservaciones;
    }

    /**
     * @param pagosReservaciones the pagosReservaciones to set
     */
    public void setPagosReservaciones(PagosTicket pagosReservaciones) {
        this.pagosReservaciones = pagosReservaciones;
    }

    public Cliente getCliente() {
        return cliente;
    }

    public void setCliente(Cliente cliente) {
        this.cliente = cliente;
    }

}
