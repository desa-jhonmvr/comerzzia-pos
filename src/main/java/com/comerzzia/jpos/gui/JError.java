/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JError.java
 *
 * Created on 20-jul-2011, 10:34:11
 */
package com.comerzzia.jpos.gui;

import com.comerzzia.jpos.gui.components.JPanelImagenFondo;
import com.comerzzia.jpos.servicios.core.variables.Variables;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.LinkedList;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.KeyStroke;

/**
 * Clase para tratar los errores de la aplicaci칩n. Puede contener la l칩gica para registrar diferentes actividades que el cliente desee monitorizar
 * @author MGRI
 */
public class JError extends JPanelImagenFondo {

    //Constantes
    public static final int TIPO_ERROR = 0;
    public static final int TIPO_INFORMACION = 1;
    public static final int TIPO_CONFIRMACION = 2;
    public static final int TIPO_SINPERMISOS = 3;
    public static final int TIPO_ADVERTENCIA = 4;
    private JDialog contenedor;
    private String desError;
    private int tipo;  // tipo de ventana de di치logo
    private LinkedList listaImagenes;
    private String imagenError = "/com/comerzzia/jpos/imagenes/mensajes/error_p.png";
    private String imagenInfo = "/com/comerzzia/jpos/imagenes/mensajes/informacion_p.png";
    private String imagenConfirmacion = "/com/comerzzia/jpos/imagenes/mensajes/confirmacion_p.png";
    private String imagenSinPermisos = "/com/comerzzia/jpos/imagenes/mensajes/sinPermisos_p.png";
    private String imagenAdvertencia = "/com/comerzzia/jpos/imagenes/mensajes/advertencia_p.png";
    private boolean aceptado = false;

    /** Creates new form JError */
    public JError() {
        super();
        inicio();
        initComponents();
        addFunctionKeys();
        //this.setVisible(true);
    }

    public JError(JDialog contenedor, String desError) {
        super();
        inicio();
        initComponents();
        this.contenedor = contenedor;

        if (desError == null || desError.equals("")) {

            desError = Variables.getVariable(Variables.MENSAJE_ERROR_GENERICO); //mensaje de error por defecto

        }

        l_error.setText(desError);
        //this.setVisible(true);
    }

    private void inicio() {
        // creamos el listado de imagenes
        listaImagenes = new LinkedList();
        listaImagenes.add(imagenError);
        listaImagenes.add(imagenInfo);
        listaImagenes.add(imagenConfirmacion);
        listaImagenes.add(imagenSinPermisos);
        listaImagenes.add(imagenAdvertencia);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        i_error = new javax.swing.JLabel();
        l_error = new com.comerzzia.jpos.gui.components.JMultilineLabel();

        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        i_error.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/comerzzia/jpos/imagenes/mensajes/error.png"))); // NOI18N
        add(i_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 60, 50));

        l_error.setBackground(new java.awt.Color(204, 255, 255));
        l_error.setFont(new java.awt.Font("Comic Sans MS", 1, 12));
        l_error.setMaximumSize(null);
        add(l_error, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, 400, 60));
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
        if (evt.getKeyChar() == '\n') {
            if (getTipo() != TIPO_ERROR) {
                aceptado = true;
                contenedor.setVisible(false);
            }
        }
    }//GEN-LAST:event_formKeyTyped
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel i_error;
    private com.comerzzia.jpos.gui.components.JMultilineLabel l_error;
    // End of variables declaration//GEN-END:variables

    public JDialog getContenedor() {
        return contenedor;
    }

    public void setContenedor(JDialog contenedor) {
        this.contenedor = contenedor;
    }

    public String getDesError() {
        return desError;
    }

    public void setDesError(String desError) {
        if (desError == null || desError.equals("")) {
            desError = " Se ha producido un error en la aplicaci칩n ";
        }
        this.desError = desError;
        l_error.setText(desError);
    }

    public int getTipo() {
        return tipo;
    }

    public void setTipo(int tipo) {
        this.tipo = tipo;
        this.aceptado = false;
        i_error.setIcon(new javax.swing.ImageIcon(getClass().getResource((String) listaImagenes.get(tipo))));
    }
    
    protected void addHotKey(KeyStroke keyStroke, String inputActionKey, Action listener) {
        ActionMap actionMap = this.getActionMap();
        InputMap inputMap = this.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap.put(keyStroke, inputActionKey);
        actionMap.put(inputActionKey, listener);
    }

    private void addFunctionKeys() {
        KeyStroke esc = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
        Action listeneresc = new AbstractAction() {

            public void actionPerformed(ActionEvent ae) {
                aceptado = false;
                contenedor.setVisible(false);
            }
        };
        addHotKey(esc, "IdentClientesc", listeneresc);

        KeyStroke enter = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0);
        Action listenerenter = new AbstractAction() {

            public void actionPerformed(ActionEvent ae) {
                if (getTipo() != TIPO_ERROR) {
                    aceptado = true;
                    contenedor.setVisible(false);
                }
            }
        };
        addHotKey(enter, "IdentCliententer", listenerenter);

    }

    public boolean isAceptado() {
        return aceptado;
    }

    public void setAceptado(boolean aceptado) {
        this.aceptado = aceptado;
    }
}
