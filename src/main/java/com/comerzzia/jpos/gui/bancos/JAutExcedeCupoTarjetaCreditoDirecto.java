/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.comerzzia.jpos.gui.bancos;

import com.comerzzia.jpos.dto.ResponseDTO;
import com.comerzzia.jpos.dto.credito.NotificacionAutorizacionConsumoDTO;
import com.comerzzia.jpos.entity.db.AutorizacionConsumoCredito;
import com.comerzzia.jpos.gui.components.JVentanaDialogo;
import com.comerzzia.jpos.gui.validation.IViewerValidationFormError;
import com.comerzzia.jpos.gui.validation.ValidadorBigInteger;
import com.comerzzia.jpos.gui.validation.ValidadorObligatoriedad;
import com.comerzzia.jpos.gui.validation.ValidationFormException;
import com.comerzzia.jpos.servicios.core.variables.Variables;
import com.comerzzia.jpos.servicios.credito.CreditoException;
import com.comerzzia.jpos.servicios.credito.ServicioAutorizacionConsumoCredito;
import com.comerzzia.jpos.servicios.login.Sesion;
import com.comerzzia.jpos.servicios.mediospago.tarjetas.TarjetaCreditoSK;
import com.comerzzia.jpos.servicios.pagos.credito.PagoCredito;
import com.comerzzia.jpos.servicios.pagos.credito.PagoCreditoSK;
import com.comerzzia.jpos.servicios.tickets.TicketS;
import com.comerzzia.jpos.util.JsonUtil;
import com.comerzzia.util.ClienteRest;
import com.comerzzia.util.Constantes;
import es.mpsistemas.util.log.Logger;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.KeyStroke;

/**
 *
 * @author Gabriel Simbania
 */
public class JAutExcedeCupoTarjetaCreditoDirecto extends JVentanaDialogo implements IViewerValidationFormError {

    private static final Logger LOG_POS = Logger.getMLogger(JAutExcedeCupoTarjetaCreditoDirecto.class);

    private String numeroAutorizacion = "";
    private String uidAutorizacion;
    private PagoCredito pagoCredito;
    private TicketS ticket;
    private static final String METODO_LOGIN_JWT = "/seg/loginjwt";
    private static final String METODO_NOTIFICACION_PUSH = "/crd/autorizacionConsumo/notificarDispositivo";

    /**
     * Creates new form JAutorizacionTarjeta
     */
    public JAutExcedeCupoTarjetaCreditoDirecto() {
        initComponents();

        addFunctionsKeys();
        registraEventoEnterBoton();
        t_numero_autorizacion.addValidador(new ValidadorObligatoriedad(), this);
        t_numero_autorizacion.addValidador(new ValidadorBigInteger(), this);
        t_numero_autorizacion.setValidacionHabilitada(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        t_numero_autorizacion = new com.comerzzia.jpos.gui.components.form.JTextFieldForm();
        b_ok2 = new com.comerzzia.jpos.gui.components.form.JButtonForm();
        b_cancelar = new com.comerzzia.jpos.gui.components.form.JButtonForm();
        lb_error = new javax.swing.JLabel();

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getStyle() | java.awt.Font.BOLD, jLabel1.getFont().getSize()+2));
        jLabel1.setText("Excede el cupo disponible del crédito");

        jLabel2.setText("No cierre esta pantalla. Espere el número de autorización.");

        b_ok2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/comerzzia/jpos/imagenes/iconos/aceptar.png"))); // NOI18N
        b_ok2.setMnemonic('a');
        b_ok2.setText("Aceptar");
        b_ok2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        b_ok2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_ok2ActionPerformed(evt);
            }
        });

        b_cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/comerzzia/jpos/imagenes/iconos/cancelar.png"))); // NOI18N
        b_cancelar.setText("Cancelar");
        b_cancelar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        b_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_cancelarActionPerformed(evt);
            }
        });

        lb_error.setForeground(new java.awt.Color(204, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(t_numero_autorizacion, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                                .addComponent(lb_error, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(23, 23, 23)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(b_ok2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(b_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(t_numero_autorizacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lb_error, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b_cancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(b_ok2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void b_ok2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_ok2ActionPerformed
        accionAceptar();
    }//GEN-LAST:event_b_ok2ActionPerformed

    private void b_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_cancelarActionPerformed
        this.listenerList = null;
        limpiarFormulario();
        getContenedor().setVisible(false);


}//GEN-LAST:event_b_cancelarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.comerzzia.jpos.gui.components.form.JButtonForm b_cancelar;
    private com.comerzzia.jpos.gui.components.form.JButtonForm b_ok2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lb_error;
    private com.comerzzia.jpos.gui.components.form.JTextFieldForm t_numero_autorizacion;
    // End of variables declaration//GEN-END:variables

    public void iniciaVista(PagoCredito pago, TicketS ticket, String uidAutorizacion) {
        this.pagoCredito = pago;
        this.ticket = ticket;
        this.uidAutorizacion = uidAutorizacion;
        limpiarFormulario();
        t_numero_autorizacion.requestFocus();
        notificarDispositivos();

    }

    /**
     * <p>
     * <b>author: </b> Gabriel Simbania</p>
     * <p>
     * Notifica al dispositivo que tiene una nueva autorizaci&oacute;n y
     * registra esa informaci&oacute;n en la base de datos</p>
     */
    private void notificarDispositivos() {

        ClienteRest clienteRest = new ClienteRest();

        try {
            pagoCredito.setCodigoValidacionManual(null);
            //Actualizo las notificaciones que no fueron procesadas por el dispositivo
            ServicioAutorizacionConsumoCredito.actualizarAutorizacionSinUso(ticket.getUid_ticket());

            String credenciales = Variables.getVariable(Variables.CREDENCIALES_AUTENTICACION_ERP_MOVIL_JWT);
            String url = Variables.getVariable(Variables.WEBSERVICE_ERP_MOVIL_ENDPOINT_URL);

            Map<String, String> headers = new HashMap<>();
            ResponseDTO responseJwt = clienteRest.clientRestPOST(url + METODO_LOGIN_JWT, credenciales, null, ResponseDTO.class);
            if (responseJwt.getExito()) {
                headers.put("Authorization", (String) responseJwt.getObjetoRespuesta());
            } else {
                throw new CreditoException("Error al autenticar el servicio web");
            }

            ticket.getCajero().getUsuario();
            ticket.getCajero().getDesUsuario();

            PagoCreditoSK pagoCreditoDirecto = (PagoCreditoSK) pagoCredito;
            TarjetaCreditoSK tarjetaCreditoSK = (TarjetaCreditoSK) pagoCredito.getTarjetaCredito();
            NotificacionAutorizacionConsumoDTO notificacionAutorizacionConsumoDTO = new NotificacionAutorizacionConsumoDTO();
            notificacionAutorizacionConsumoDTO.setCodAlm(ticket.getTienda());
            notificacionAutorizacionConsumoDTO.setCodCaja(ticket.getCodcaja());
            notificacionAutorizacionConsumoDTO.setNombreAlmacen(Sesion.getTienda().getAlmacen().getDesalm());
            notificacionAutorizacionConsumoDTO.setIdentificacion(tarjetaCreditoSK.getPlastico().getCedulaCliente());
            notificacionAutorizacionConsumoDTO.setPlastico(tarjetaCreditoSK.getPlastico().getNumeroTarjeta());
            notificacionAutorizacionConsumoDTO.setCredito(tarjetaCreditoSK.getPlastico().getCupo().getNumeroCredito().longValue());
            notificacionAutorizacionConsumoDTO.setCupoSolicitado(pagoCredito.getUstedPaga());
            notificacionAutorizacionConsumoDTO.setUidTicket(ticket.getUid_ticket());
            notificacionAutorizacionConsumoDTO.setUsuarioSolicitud(ticket.getCajero().getUsuario());

            ResponseDTO responseDTO = clienteRest.clientRestPOST(url + METODO_NOTIFICACION_PUSH, notificacionAutorizacionConsumoDTO, headers, ResponseDTO.class);
            if (!responseDTO.getExito()) {
                throw new CreditoException("No se pudo notificar a los dispositivos la autorizacion " + responseDTO.getDescripcion());
            }

            String direccionIp = Sesion.getTienda().getSriTienda().getCajaActiva().getDireccionIp() + ":" + Constantes.SOCKET_AUTORIZACION_CONSUMO;

            AutorizacionConsumoCredito autorizacionConsumoCredito = new AutorizacionConsumoCredito();
            autorizacionConsumoCredito.setCodAlm(ticket.getTienda());
            autorizacionConsumoCredito.setCodCaja(ticket.getCodcaja());
            autorizacionConsumoCredito.setCodCli(tarjetaCreditoSK.getPlastico().getCedulaCliente());
            autorizacionConsumoCredito.setCodUsuario(Sesion.getUsuario().getUsuario());
            autorizacionConsumoCredito.setDireccionIp(direccionIp);
            autorizacionConsumoCredito.setFechaCreacion(new Date());
            autorizacionConsumoCredito.setIdCredito(tarjetaCreditoSK.getPlastico().getCupo().getNumeroCredito().longValue());
            autorizacionConsumoCredito.setNombreAlmacen(Sesion.getTienda().getAlmacen().getDesalm());
            autorizacionConsumoCredito.setNumPlastico(tarjetaCreditoSK.getPlastico().getNumeroTarjeta());
            autorizacionConsumoCredito.setUidAutorizacion(uidAutorizacion);
            autorizacionConsumoCredito.setCuotas(pagoCreditoDirecto.getPlanSeleccionado().getNumCuotas());

            autorizacionConsumoCredito.setUidTicket(ticket.getUid_ticket());
            autorizacionConsumoCredito.setUidIdDispositivo((String) responseDTO.getObjetoRespuesta());
            autorizacionConsumoCredito.setValorSolicitado(pagoCredito.getUstedPaga());

            ServicioAutorizacionConsumoCredito.crear(autorizacionConsumoCredito);

        } catch (Exception ex) {
            LOG_POS.error("Error al registrar la notificaci\u00F3n ", ex);
            lb_error.setText("Error al registrar la notificaci\u00F3n " + ex.getMessage());
        }

    }

    @Override
    public void accionAceptar() {
        try {
            t_numero_autorizacion.validar();
            numeroAutorizacion = t_numero_autorizacion.getText().trim();
            pagoCredito.setCodigoValidacionManual(numeroAutorizacion);
            String resultado = pagoCredito.validarAutorizacionManual();
            if (resultado == null) {
                contenedor.setVisible(false);
            } else {
                pagoCredito.setCodigoValidacionManual(null);
                lb_error.setText(resultado);
            }
        } catch (ValidationFormException ex) {
            addError(ex);
        }
    }

    /**
     * <p>
     * <b>author: </b> Gabriel Simbania</p>
     * <p>
     * Autoriza el cupo para que continue el proceso de la venta</p>
     *
     * @param respuestaDispositivo
     */
    public void autorizaCupo(String respuestaDispositivo) {

        String uidAutorizacionResp = JsonUtil.getElementJson(respuestaDispositivo, "uidAutorizacion");
        if (!uidAutorizacion.equals(uidAutorizacionResp)) {
            pagoCredito.setCodigoValidacionManual(null);
            lb_error.setText("La autozaci\u00F3n no coincide ");
        }

        String numAutorizacion = null;
        try {
            numAutorizacion = JsonUtil.getElementJson(respuestaDispositivo, "numeroAutorizacion");
        } catch (NullPointerException ex) {
            //Se captura la excepcion en caso que no tenga numero de autorizacion
        }
        String usuarioAutoriza = JsonUtil.getElementJson(respuestaDispositivo, "usuarioAutoriza");
        String estadoAutorizacion = JsonUtil.getElementJson(respuestaDispositivo, "estadoAutorizacion");

        registrarInformacion(uidAutorizacion, numAutorizacion, usuarioAutoriza, estadoAutorizacion);

        if ("N".equals(estadoAutorizacion)) {
            pagoCredito.setCodigoValidacionManual(null);
            lb_error.setText("La autozaci\u00F3n fue negada ");
        } else {
            t_numero_autorizacion.setText(numAutorizacion);
            accionAceptar();
        }
    }

    /**
     * <p>
     * <b>author: </b> Gabriel Simbania</p>
     * <p>
     * Registra la informaci&oacute;n de la autorizaci&oacute;n </p>
     *
     * @param uidAutorizacion
     * @param numAutorizacion
     * @param usuarioAutoriza
     * @param estadoAutorizacion
     */
    private void registrarInformacion(String uidAutorizacion, String numAutorizacion, String usuarioAutoriza, String estadoAutorizacion) {

        try {
            ServicioAutorizacionConsumoCredito.actualizarAutorizacion(uidAutorizacion, numAutorizacion, usuarioAutoriza, estadoAutorizacion);
        } catch (Exception ex) {
            lb_error.setText(ex.getMessage());
        }

    }

    @Override
    public void limpiarFormulario() {
        numeroAutorizacion = "";
        t_numero_autorizacion.setText("");
        lb_error.setText("");
    }

    public String getNumeroAutorizacion() {
        return numeroAutorizacion;
    }

    public void setNumeroAutorizacion(String numeroAutorizacion) {
        this.numeroAutorizacion = numeroAutorizacion;
    }

    public void iniciaFoco() {
        t_numero_autorizacion.requestFocus();
    }

    private void addFunctionsKeys() {
        KeyStroke esc = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
        Action listeneresc = new AbstractAction() {

            public void actionPerformed(ActionEvent ae) {
                accionCancelar();
            }
        };
        addHotKey(esc, "IdentClientesc", listeneresc);
    }

    @Override
    public void addError(ValidationFormException e) {
        lb_error.setText(e.getMessage());
    }

    @Override
    public void clearError() {
        lb_error.setText("");

    }

    @Override
    public void accionLeerTarjetaVD() {
    }

    public void setT_numero_autorizacion(String numeroAutorizacion) {
        this.t_numero_autorizacion.setText(numeroAutorizacion);
    }

}
