/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * JLecturaTarjetaManual.java
 *
 * Created on 06-sep-2012, 11:42:33
 */
package com.comerzzia.jpos.gui.bancos;

import com.comerzzia.jpos.entity.db.Cliente;
import com.comerzzia.jpos.gui.components.JVentanaDialogo;
import com.comerzzia.jpos.gui.validation.IValidableForm;
import com.comerzzia.jpos.gui.validation.IViewerValidationFormError;
import com.comerzzia.jpos.gui.validation.ValidadorBigInteger;
import com.comerzzia.jpos.gui.validation.ValidadorEntero;
import com.comerzzia.jpos.gui.validation.ValidadorFechaAnioMesValida;
import com.comerzzia.jpos.gui.validation.ValidadorObligatoriedad;
import com.comerzzia.jpos.gui.validation.ValidadorTexto;
import com.comerzzia.jpos.gui.validation.ValidationFormException;
import com.comerzzia.jpos.gui.validation.ValidationException;
import com.comerzzia.jpos.persistencia.credito.plasticos.PlasticoBean;
import com.comerzzia.jpos.servicios.clientes.ClienteException;
import com.comerzzia.jpos.servicios.clientes.ClientesServices;
import com.comerzzia.jpos.servicios.credito.CreditoException;
import com.comerzzia.jpos.servicios.credito.CreditoNotFoundException;
import com.comerzzia.jpos.servicios.credito.CreditoServices;
import com.comerzzia.jpos.servicios.login.Sesion;
import com.comerzzia.jpos.servicios.mediospago.tarjetas.TarjetaCredito;
import com.comerzzia.util.ValidadorCedula;
import es.mpsistemas.util.log.Logger;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import javax.persistence.NoResultException;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.KeyStroke;

/**
 *
 * @author MGRI
 */
public class JLecturaTarjetaManual extends JVentanaDialogo implements IViewerValidationFormError {

    private static final Logger log = Logger.getMLogger(JLecturaTarjetaManual.class);
    private static final long serialVersionUID = 1L;
    private String tarjetaLeida = "";
    private String caducidad;
    private String cvv;
    private List<IValidableForm> formularioFacturacion;
    private boolean esCreditoDirecto;
    private boolean esLecturaDesdeCedula;

    /**
     * Creates new form JLecturaTarjetaManual
     */
    public JLecturaTarjetaManual() {
        initComponents();
        addFunctionsKeys();
        registraEventoEnterBoton();
        inicializaValidacion();
        creaFormularioCliente();
    }

    public void iniciaVista(boolean esTarjetaSukasa, TarjetaCredito tc) {
        this.esCreditoDirecto = esTarjetaSukasa;
        this.esLecturaDesdeCedula = false;

        if (tc == null) {
            limpiarFormulario();
        } else {
            cargarFormulario(tc);
        }
        estableceElementosActivos(esTarjetaSukasa);
        if (Sesion.config.isModoDesarrollo()) {
            t_fecha_caducidad.setText("1712");
            if (!esTarjetaSukasa) {
                t_tarjeta_credito.setText("1234567890123456");
                t_cod_seguridad.setText("123");
            } else {
                t_tarjeta_credito.setText("1992102539681017");
            }
        }
    }

    private void estableceElementosActivos(boolean esTarjetaSukasa) {
        t_cod_seguridad.setVisible(!esTarjetaSukasa);
        //t_fecha_caducidad.setVisible(!esTarjetaSukasa);
        t_cod_seguridad.setValidacionHabilitada(!esTarjetaSukasa);
        //t_fecha_caducidad.setValidacionHabilitada(!esTarjetaSukasa);           
        lb_cod_seguridad.setVisible(!esTarjetaSukasa);
        //lb_fecha_caducidad.setVisible(!esTarjetaSukasa);
        t_tarjeta_credito.setValidacionHabilitada(!esTarjetaSukasa); // Si es tarjeta Sukasa se validará la longitud manualmente
        t_fecha_caducidad.setValidacionHabilitada(!esTarjetaSukasa); // Si es tarjeta Sukasa se validará la fecha manualmente
    }

    private void cargarFormulario(TarjetaCredito tc) {
        for (IValidableForm e : formularioFacturacion) {
            e.setValidacionHabilitada(false);
        }
        tarjetaLeida = null;
        lb_error.setText("");
        t_cod_seguridad.setText("");
        t_fecha_caducidad.setText("");
        t_tarjeta_credito.setText(tc.getNumero());
        jLabel4.setText("");

        iniciaFoco();
        for (IValidableForm e : formularioFacturacion) {
            e.setValidacionHabilitada(true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lb_fecha_caducidad = new javax.swing.JLabel();
        lb_cod_seguridad = new javax.swing.JLabel();
        t_tarjeta_credito = new com.comerzzia.jpos.gui.components.form.JTextFieldForm();
        t_fecha_caducidad = new com.comerzzia.jpos.gui.components.form.JTextFieldForm();
        t_cod_seguridad = new com.comerzzia.jpos.gui.components.form.JTextFieldForm();
        b_cancelar = new com.comerzzia.jpos.gui.components.form.JButtonForm();
        b_ok = new com.comerzzia.jpos.gui.components.form.JButtonForm();
        lb_error = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getStyle() | java.awt.Font.BOLD, jLabel1.getFont().getSize()+2));
        jLabel1.setText("Pago con Crédito Directo ó Tarjeta de Crédito");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("<html>Pago con crédito directo ó<br> tarjeta de crédito:</html>");

        lb_fecha_caducidad.setText("Fecha de Caducidad:");

        lb_cod_seguridad.setText("Cod. Seguridad:");

        t_tarjeta_credito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_tarjeta_creditoActionPerformed(evt);
            }
        });

        t_fecha_caducidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_fecha_caducidadActionPerformed(evt);
            }
        });
        t_fecha_caducidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                t_fecha_caducidadKeyPressed(evt);
            }
        });

        b_cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/comerzzia/jpos/imagenes/iconos/cancelar.png"))); // NOI18N
        b_cancelar.setText("Cancelar");
        b_cancelar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        b_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_cancelarActionPerformed(evt);
            }
        });

        b_ok.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/comerzzia/jpos/imagenes/iconos/aceptar.png"))); // NOI18N
        b_ok.setMnemonic('a');
        b_ok.setText("Aceptar");
        b_ok.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        b_ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_okActionPerformed(evt);
            }
        });

        lb_error.setForeground(new java.awt.Color(204, 0, 0));

        jLabel3.setForeground(new java.awt.Color(51, 153, 255));
        jLabel3.setText("(AAMM)");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addComponent(b_ok, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_cancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(75, 75, 75))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lb_error, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lb_fecha_caducidad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_fecha_caducidad, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addGap(34, 34, 34)
                        .addComponent(lb_cod_seguridad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_cod_seguridad, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_tarjeta_credito, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lb_error, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(t_tarjeta_credito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(t_fecha_caducidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lb_fecha_caducidad)
                    .addComponent(lb_cod_seguridad)
                    .addComponent(t_cod_seguridad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(b_ok, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(b_cancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void b_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_cancelarActionPerformed
        cerrarVentana();
}//GEN-LAST:event_b_cancelarActionPerformed

    private void b_okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_okActionPerformed
        try {
//            if(t_cod_seguridad.getText().trim() != null){
            if (validarFormulario()) {
                if (esCreditoDirecto && t_tarjeta_credito.getText().trim().length() <= 13) { // Diferenciamos cuando hemos puesto una cedula y cuando una tarjeta               
                    // Tarjeta Leida debe estar ya seteada al validar
                    // Caducidad debe estar ya seteada al validar
                    setCvv("");
                } else {
                    tarjetaLeida = t_tarjeta_credito.getText().trim();
                    setCvv(t_cod_seguridad.getText().trim());
                    setCaducidad(t_fecha_caducidad.getText().trim());
                }
                contenedor.setVisible(false);
            }
//            }
        } catch (ValidationException ex) {
            log.debug("Excepción de validación de formulario: " + ex.getMessage());
            lb_error.setText(ex.getMessage());
        }
    }//GEN-LAST:event_b_okActionPerformed

    private void t_fecha_caducidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_fecha_caducidadActionPerformed

    }//GEN-LAST:event_t_fecha_caducidadActionPerformed

    private void t_tarjeta_creditoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_tarjeta_creditoActionPerformed
    }//GEN-LAST:event_t_tarjeta_creditoActionPerformed

    private void t_fecha_caducidadKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_fecha_caducidadKeyPressed
        if (t_tarjeta_credito.getText().length() <= 13) {
            Cliente cliente = new Cliente();
            try {
                String cedula = t_tarjeta_credito.getText();
                PlasticoBean tarjeta = CreditoServices.consultarPlasticoPorCedula(cedula);
                if (tarjeta != null) {
                    cliente = ClientesServices.getInstance().consultaClienteIdenti(cedula);
                }
                jLabel4.setText(cliente.getNombreYApellidos());
            } catch (CreditoException ex) {
                java.util.logging.Logger.getLogger(JLecturaTarjetaManual.class.getName()).log(Level.SEVERE, null, ex);
            } catch (CreditoNotFoundException ex) {
                java.util.logging.Logger.getLogger(JLecturaTarjetaManual.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClienteException ex) {
                java.util.logging.Logger.getLogger(JLecturaTarjetaManual.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoResultException ex) {
                java.util.logging.Logger.getLogger(JLecturaTarjetaManual.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_t_fecha_caducidadKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.comerzzia.jpos.gui.components.form.JButtonForm b_cancelar;
    private com.comerzzia.jpos.gui.components.form.JButtonForm b_ok;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lb_cod_seguridad;
    private javax.swing.JLabel lb_error;
    private javax.swing.JLabel lb_fecha_caducidad;
    private com.comerzzia.jpos.gui.components.form.JTextFieldForm t_cod_seguridad;
    private com.comerzzia.jpos.gui.components.form.JTextFieldForm t_fecha_caducidad;
    private com.comerzzia.jpos.gui.components.form.JTextFieldForm t_tarjeta_credito;
    // End of variables declaration//GEN-END:variables

    public String getTarjetaLeida() {
        return tarjetaLeida;
    }

    public void setTarjetaLeida(String tarjetaLeida) {
        this.tarjetaLeida = tarjetaLeida;
    }

    @Override
    public void accionAceptar() {
        contenedor.setVisible(false);
    }

    @Override
    public void limpiarFormulario() {
        for (IValidableForm e : formularioFacturacion) {
            e.setValidacionHabilitada(false);
        }
        tarjetaLeida = null;
        lb_error.setText("");
        t_cod_seguridad.setText("");
        t_fecha_caducidad.setText("");
        t_tarjeta_credito.setText("");
        jLabel4.setText("");

        iniciaFoco();
        for (IValidableForm e : formularioFacturacion) {
            e.setValidacionHabilitada(true);
        }
    }

    public void iniciaFoco() {
        t_tarjeta_credito.requestFocus();
    }

    private void addFunctionsKeys() {
        KeyStroke esc = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
        Action listeneresc = new AbstractAction() {

            public void actionPerformed(ActionEvent ae) {
                accionCancelar();
            }
        };
        addHotKey(esc, "IdentClientesc", listeneresc);
        // Acción de acceso a Tabla
    }

    public String getCaducidad() {
        return caducidad;
    }

    public void setCaducidad(String caducidad) {
        this.caducidad = caducidad;
    }

    public String getCvv() {
        return cvv;
    }

    public void setCvv(String cvv) {
        this.cvv = cvv;
    }

    @Override
    public void addError(ValidationFormException e) {
        lb_error.setText(e.getMessage());
    }

    @Override
    public void clearError() {
        lb_error.setText("");
    }

    private void inicializaValidacion() {
        t_tarjeta_credito.addValidador(new ValidadorObligatoriedad(), this);
        t_tarjeta_credito.addValidador(new ValidadorTexto(14, 16), this);
        t_tarjeta_credito.addValidador(new ValidadorBigInteger(), this);

        t_fecha_caducidad.addValidador(new ValidadorObligatoriedad(), this);
        t_fecha_caducidad.addValidador(new ValidadorTexto(4), this);
        t_fecha_caducidad.addValidador(new ValidadorFechaAnioMesValida(true), this);

        t_cod_seguridad.addValidador(new ValidadorObligatoriedad(), this);
        t_cod_seguridad.addValidador(new ValidadorTexto(3, 4), this);
        t_cod_seguridad.addValidador(new ValidadorEntero(), this);

    }

    private void creaFormularioCliente() {
        formularioFacturacion = new LinkedList<IValidableForm>();
        formularioFacturacion.add(t_tarjeta_credito);
        formularioFacturacion.add(t_fecha_caducidad);
        formularioFacturacion.add(t_cod_seguridad);
    }

    private boolean validarFormulario() throws ValidationException {
        boolean valido = true;
        esLecturaDesdeCedula = false;

        for (IValidableForm e : formularioFacturacion) {
            try {
                e.validar();
            } catch (ValidationFormException ex) {
                log.debug("Excepción de validación de formulario: " + ex.getMessage());
                throw new ValidationException(ex.getMessage());
            }
        }
        if (esCreditoDirecto) {
            // Validación de longitud de la tarjeta y fecha
            if (t_tarjeta_credito.getText().length() <= 13) {
                if (ValidadorCedula.verificarIdEcuador(ValidadorCedula.CEDULA, t_tarjeta_credito.getText())) {
                    // Cedula valida
                    String cedula = t_tarjeta_credito.getText();
                    try {
                        PlasticoBean tarjeta = CreditoServices.consultarPlasticoPorCedula(cedula);
                        this.caducidad = tarjeta.getFechaCaducidad().getString("YYMM"); // sdf.format();
                        this.tarjetaLeida = tarjeta.getNumeroTarjeta();
                    } catch (CreditoException ex) {
                        log.error("validarFormulario() - Error consultando Plasticos a partir de cédula : " + ex.getMessage(), ex);
                        throw new ValidationException("Error inesperado consultando tarjetas");
                    } catch (CreditoNotFoundException ex) {
                        throw new ValidationException("No se encontraron tarjetas asociadas válidas");
                    }
                    esLecturaDesdeCedula = true;
                    return valido;
                } else {
                    // Cedula invalida
                    throw new ValidationException("El número de cédula es inválido");
                }
            } else if (t_tarjeta_credito.getText().length() > 16) {
                throw new ValidationException("El número de tarjeta supera longitud máxima");
            } else {
                //Validación de la fecha de caducidd cuando estamso tratando con crédito directo
                t_fecha_caducidad.setValidacionHabilitada(true);
                try {
                    t_fecha_caducidad.validar();
                } catch (ValidationFormException ex) {
                    log.debug("Excepción de validación de formulario: " + ex.getMessage());
                    throw new ValidationException(ex.getMessage());
                } finally {
                    t_fecha_caducidad.setValidacionHabilitada(false);
                }
            }
        }

        return valido;

    }

    @Override
    public void accionLeerTarjetaVD() {
    }

    public boolean isEsLecturaDesdeCedula() {
        return esLecturaDesdeCedula;
    }
}
