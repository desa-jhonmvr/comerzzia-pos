/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * JReimpresionFactura.java
 *
 * Created on 11-mar-2014, 16:47:03
 */
package com.comerzzia.jpos.gui.reimpresion.tipos;

import com.comerzzia.jpos.entity.db.TicketsAlm;
import com.comerzzia.jpos.gui.JPrincipal;
import com.comerzzia.jpos.gui.components.JVentanaDialogo;
import com.comerzzia.jpos.gui.validation.IValidableForm;
import com.comerzzia.jpos.gui.validation.IViewerValidationFormError;
import com.comerzzia.jpos.gui.validation.ValidadorObligatoriedad;
import com.comerzzia.jpos.gui.validation.ValidadorTexto;
import com.comerzzia.jpos.gui.validation.ValidationFormException;
import com.comerzzia.jpos.persistencia.print.documentos.DocumentosBean;
import com.comerzzia.jpos.persistencia.print.documentos.impresos.DocumentosImpresosBean;
import com.comerzzia.jpos.persistencia.tickets.TicketsDao;
import com.comerzzia.jpos.servicios.core.contadores.ContadorException;
import com.comerzzia.jpos.servicios.core.contadores.caja.ServicioContadoresCaja;
import com.comerzzia.jpos.servicios.core.variables.VariablesAlm;
import com.comerzzia.jpos.servicios.login.Sesion;
import com.comerzzia.jpos.servicios.print.PrintServices;
import com.comerzzia.jpos.servicios.print.documentos.DocumentoException;
import com.comerzzia.jpos.servicios.print.documentos.DocumentosService;
import com.comerzzia.jpos.servicios.tickets.TicketException;
import com.comerzzia.jpos.util.mybatis.SessionFactory;
import es.mpsistemas.util.fechas.Fecha;
import es.mpsistemas.util.log.Logger;
import es.mpsistemas.util.mybatis.session.SqlSession;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.UUID;
import java.util.logging.Level;

/**
 *
 * @author SMLM
 */
public class JReimpresionFactura extends JVentanaDialogo implements IViewerValidationFormError {

    private static Logger log = Logger.getMLogger(JReimpresionFactura.class);
    List<IValidableForm> formulario;
    String tipo = null;

    /**
     * Creates new form JReimpresionFactura
     */
    public JReimpresionFactura() {
        super();

        try {
            formulario = new LinkedList<IValidableForm>();
            initComponents();

            //creamos la validación
            inicializaValidacion();
            //creamos el formulario
            crearFormulario();

            t_factura1.setText(VariablesAlm.getVariable(VariablesAlm.COD_ALMACEN));
            registraEventoEnterBoton();
            billeton.setSelected(Boolean.FALSE);
            cupon.setSelected(Boolean.FALSE);
            fac.setSelected(Boolean.FALSE);
            vch.setSelected(Boolean.FALSE);
            tch.setSelected(Boolean.FALSE);
        } catch (Exception e) {

        }
    }

    /**
     * Creates new form JReimpresionFactura
     */
    public JReimpresionFactura(String tipo) {
        super();
        this.tipo = tipo;
        try {
            formulario = new LinkedList<IValidableForm>();
            initComponents();

            //creamos la validación
            inicializaValidacion();
            //creamos el formulario
            crearFormulario();

            if (tipo.equals(DocumentosBean.FACTURA)) {
                l_documento.setText("Factura: ");
                l_documento.setDisplayedMnemonic('F');
            }
            if (tipo.equals(DocumentosBean.NOTA_CREDITO)) {
                l_documento.setText("Nota de Crédito: ");
                l_documento.setDisplayedMnemonic('N');
            }
            if (tipo.equals(DocumentosBean.GIFTCARD) || tipo.equals(DocumentosBean.GIFTCARD_P)) {
                l_documento.setText("Recibo: ");
                l_documento.setDisplayedMnemonic('R');
            }
            if (tipo.equals(DocumentosBean.CREDITO_ABONO) || tipo.equals(DocumentosBean.LETRA_ABONO)) {
                l_documento.setText("Recibo de Pago: ");
                l_documento.setDisplayedMnemonic('R');
            }

            t_factura1.setText(VariablesAlm.getVariable(VariablesAlm.COD_ALMACEN));
            registraEventoEnterBoton();
        } catch (Exception e) {

        }
    }

    public void setTipo(String tipo) {
        this.tipo = tipo;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sesion1 = new com.comerzzia.jpos.servicios.login.Sesion();
        l_documento = new javax.swing.JLabel();
        t_factura1 = new com.comerzzia.jpos.gui.components.form.JTextFieldForm();
        t_factura2 = new com.comerzzia.jpos.gui.components.form.JTextFieldForm();
        t_factura3 = new com.comerzzia.jpos.gui.components.form.JTextFieldForm();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        b_cancelar = new com.comerzzia.jpos.gui.components.form.JButtonForm();
        lb_error = new javax.swing.JLabel();
        b_aceptar1 = new com.comerzzia.jpos.gui.components.form.JButtonForm();
        vch = new javax.swing.JCheckBox();
        cupon = new javax.swing.JCheckBox();
        billeton = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        fac = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea = new com.comerzzia.jpos.gui.components.form.JTextAreaForm();
        factura = new javax.swing.JLabel();
        l_factura_cabecera1 = new javax.swing.JLabel();
        gch = new javax.swing.JCheckBox();
        tch = new javax.swing.JCheckBox();

        setMaximumSize(new java.awt.Dimension(520,270));
        setMinimumSize(new java.awt.Dimension(520,340));

        l_documento.setDisplayedMnemonic('f');
        l_documento.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        l_documento.setLabelFor(t_factura2);
        l_documento.setAlignmentY(0.0F);

        t_factura1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        t_factura1.setNextFocusableComponent(t_factura2);

        t_factura2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        t_factura2.setNextFocusableComponent(t_factura3);
        t_factura2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_factura2ActionPerformed(evt);
            }
        });
        t_factura2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                t_factura2KeyPressed(evt);
            }
        });

        t_factura3.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel4.setText("-");

        jLabel5.setText("-");

        jLabel6.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel6.setText("REIMPRESIÓN");

        b_cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/comerzzia/jpos/imagenes/iconos/cancelar.png"))); // NOI18N
        b_cancelar.setText("Cancelar");
        b_cancelar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        b_cancelar.setNextFocusableComponent(t_factura1);
        b_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_cancelarActionPerformed(evt);
            }
        });

        lb_error.setForeground(new java.awt.Color(204, 0, 0));

        b_aceptar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/comerzzia/jpos/imagenes/iconos/aceptar.png"))); // NOI18N
        b_aceptar1.setMnemonic('a');
        b_aceptar1.setText("Aceptar");
        b_aceptar1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        b_aceptar1.setNextFocusableComponent(b_cancelar);
        b_aceptar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_aceptar1ActionPerformed(evt);
            }
        });

        vch.setText(" VOUCHER ");
        vch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vchActionPerformed(evt);
            }
        });

        cupon.setText(" CUPON - SORTEO");

        billeton.setText(" BILLETON -SUKUPON");
        billeton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billetonActionPerformed(evt);
            }
        });

        jLabel1.setText("Seleccione Los Documentos a Imprimir");

        fac.setText(" FACTURA");

        jLabel2.setText("Motivo Reimpresión");

        jTextArea.setColumns(20);
        jTextArea.setRows(5);
        jScrollPane2.setViewportView(jTextArea);

        factura.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        factura.setForeground(new java.awt.Color(0, 0, 204));
        factura.setText("ID");
        factura.setFocusable(false);

        l_factura_cabecera1.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        l_factura_cabecera1.setText("Última Factura:");
        l_factura_cabecera1.setFocusable(false);

        gch.setText(" GARANTIA EXTENDIDA ");
        gch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gchActionPerformed(evt);
            }
        });

        tch.setText("TABLA AMORTIZACION");
        tch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(158, 158, 158)
                .addComponent(b_aceptar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(b_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lb_error, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(28, 28, 28))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(l_factura_cabecera1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(factura, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(115, 115, 115))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tch)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(l_documento, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(10, 10, 10)
                                    .addComponent(t_factura1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(t_factura2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(t_factura3, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(174, 174, 174))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(cupon)
                                        .addComponent(vch)
                                        .addComponent(fac)
                                        .addComponent(billeton)
                                        .addComponent(jLabel1)
                                        .addComponent(gch))
                                    .addGap(32, 32, 32)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(81, 81, 81))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(218, 218, 218))))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(factura, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(l_factura_cabecera1))
                .addGap(3, 3, 3)
                .addComponent(lb_error, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(l_documento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(t_factura1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(t_factura2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(t_factura3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jLabel5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(b_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b_aceptar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fac)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(billeton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cupon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(vch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tch)))
                .addGap(29, 29, 29))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void b_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_cancelarActionPerformed
        accionCancelar();
}//GEN-LAST:event_b_cancelarActionPerformed

    private void b_aceptar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_aceptar1ActionPerformed
        accionAceptar();
    }//GEN-LAST:event_b_aceptar1ActionPerformed

    private void billetonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billetonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_billetonActionPerformed

    private void t_factura2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_factura2ActionPerformed
        String texto = t_factura2.getText();
        if (!texto.equals("")) {
            int contador = 3;
            try {
                while (contador > t_factura2.getText().length()) {
                    t_factura2.setText("0" + t_factura2.getText());

                }
                this.factura.setText(getIdFactura(t_factura2.getText()));
                t_factura2.setNextFocusableComponent(t_factura3);

            } catch (ContadorException ex) {
                java.util.logging.Logger.getLogger(JReimpresionFactura.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_t_factura2ActionPerformed

    private void t_factura2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_factura2KeyPressed

//        t_factura2.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,
//                java.util.Collections.EMPTY_SET);
//        if (evt.getKeyCode() == KeyEvent.VK_TAB) {
//                String texto = t_factura2.getText();
//        if(!texto.equals("")){
//            
//       
//       int contador=3;
//        try {
//             while (contador > t_factura2.getText().length()) {    
//                  t_factura2.setText("0" + t_factura2.getText());
//                  
//                }
//            this.factura.setText(getIdFactura(t_factura2.getText()));
//            t_factura2.setNextFocusableComponent(t_factura3);
//            
//        } catch (ContadorException ex) {
//            java.util.logging.Logger.getLogger(JReimpresionFactura.class.getName()).log(Level.SEVERE, null, ex);
//        }
//         }
//       
//        }
    }//GEN-LAST:event_t_factura2KeyPressed

    private void gchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gchActionPerformed

    private void vchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vchActionPerformed

    private void tchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tchActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.comerzzia.jpos.gui.components.form.JButtonForm b_aceptar1;
    private com.comerzzia.jpos.gui.components.form.JButtonForm b_cancelar;
    private javax.swing.JCheckBox billeton;
    private javax.swing.JCheckBox cupon;
    private javax.swing.JCheckBox fac;
    private javax.swing.JLabel factura;
    private javax.swing.JCheckBox gch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private com.comerzzia.jpos.gui.components.form.JTextAreaForm jTextArea;
    private javax.swing.JLabel l_documento;
    private javax.swing.JLabel l_factura_cabecera1;
    private javax.swing.JLabel lb_error;
    private com.comerzzia.jpos.servicios.login.Sesion sesion1;
    private com.comerzzia.jpos.gui.components.form.JTextFieldForm t_factura1;
    private com.comerzzia.jpos.gui.components.form.JTextFieldForm t_factura2;
    private com.comerzzia.jpos.gui.components.form.JTextFieldForm t_factura3;
    private javax.swing.JCheckBox tch;
    private javax.swing.JCheckBox vch;
    // End of variables declaration//GEN-END:variables

    @Override
    public void accionAceptar() {
        try {

            validarFormulario();
            DocumentosBean documentoBean = DocumentosService.consultarDocByUniqueKey(this.tipo, t_factura1.getText(), t_factura2.getText(), t_factura3.getText());

            //G.S. Genera la cabecera en caso de no existir
            documentoBean = generarCabecera(documentoBean);

            if (documentoBean != null) {
                if (tipo.equals(DocumentosBean.FACTURA)) {
//                    boolean imprimirVoucher = JPrincipal.getInstance().crearVentanaConfirmacion("¿Desea reimprimir los voucher de pago?", "Sí", "No");
                    if (!fac.isSelected() && !vch.isSelected() && !cupon.isSelected() && !billeton.isSelected() && !gch.isSelected() && !tch.isSelected()) {

                        this.contenedor.setVisible(false);
                        JPrincipal.getInstance().crearAdvertencia("Selecione al menos una opción.");
                        this.contenedor.setVisible(true);
                        return;
                    }
                    String respuesta = PrintServices.getInstance().reimpresionFactura(documentoBean, false, fac.isSelected(), vch.isSelected(), cupon.isSelected(), billeton.isSelected(), jTextArea.getText(), gch.isSelected(), tch.isSelected());
                    if (!PrintServices.MENSAJE_RESPUESTA.equals(respuesta)) {
                        this.contenedor.setVisible(false);
                        JPrincipal.getInstance().crearAdvertencia(respuesta);
                        this.contenedor.setVisible(true);
                    }

                }
                if (tipo.equals(DocumentosBean.NOTA_CREDITO)) {
                    PrintServices.getInstance().reimpresionNotaCredito(documentoBean, false, jTextArea.getText());
                }
                if (tipo.equals(DocumentosBean.GIFTCARD) || tipo.equals(DocumentosBean.GIFTCARD_P)) {
                    PrintServices.getInstance().reimpresionGiftCard(documentoBean, false, jTextArea.getText(),Boolean.FALSE);
                }
                if (tipo.equals(DocumentosBean.CREDITO_ABONO)) {
                    PrintServices.getInstance().reimpresionCreditoAbono(documentoBean, false, jTextArea.getText());
                }
                if (tipo.equals(DocumentosBean.LETRA_ABONO)) {
                    PrintServices.getInstance().reimpresionLetraAbono(documentoBean, false, jTextArea.getText());
                }
            } else {
                this.contenedor.setVisible(false);
                JPrincipal.getInstance().crearAdvertencia("No se han encontrado tickets para los datos introducidos.");
                this.contenedor.setVisible(true);
            }
        } catch (TicketException ex) {
            addError(new DocumentoException(ex.getMessage()));
        } catch (ValidationFormException ex) {
            addError(ex);
        } catch (DocumentoException ex) {
            addError(ex);
        }
    }

    public void accionPrevisualizar() {
        try {
            validarFormulario();
            DocumentosBean documentoBean = DocumentosService.consultarDocByUniqueKey(this.tipo, t_factura1.getText(), t_factura2.getText(), t_factura3.getText());
            if (documentoBean != null) {
                if (tipo.equals(DocumentosBean.FACTURA)) {
                    //se aumenta el estado cupen false se agrega billeton false
                    PrintServices.getInstance().reimpresionFactura(documentoBean, true, true, false, false, false, "", false, tch.isSelected());
                }
                if (tipo.equals(DocumentosBean.NOTA_CREDITO)) {
                    PrintServices.getInstance().reimpresionNotaCredito(documentoBean, true, "Previsualizar");
                }
                if (tipo.equals(DocumentosBean.GIFTCARD) || tipo.equals(DocumentosBean.GIFTCARD_P)) {
                    PrintServices.getInstance().reimpresionGiftCard(documentoBean, true, "Previsualizar",Boolean.FALSE);
                }
                if (tipo.equals(DocumentosBean.CREDITO_ABONO)) {
                    PrintServices.getInstance().reimpresionCreditoAbono(documentoBean, true, "Previsualizar");
                }
                if (tipo.equals(DocumentosBean.LETRA_ABONO)) {
                    PrintServices.getInstance().reimpresionLetraAbono(documentoBean, true, "Previsualizar");
                }
            } else {
                this.contenedor.setVisible(false);
                JPrincipal.getInstance().crearAdvertencia("No se han encontrado tickets para los datos introducidos.");
                this.contenedor.setVisible(true);
            }
        } catch (ValidationFormException ex) {
            addError(ex);
        } catch (DocumentoException ex) {
            addError(ex);
        }
    }

    @Override
    public void limpiarFormulario() {

        for (IValidableForm elem : formulario) {
            elem.setValidacionHabilitada(false);
        }

        for (IValidableForm elem : formulario) {
            elem.setText("");
        }

        this.t_factura2.requestFocus();

        for (IValidableForm elem : formulario) {
            elem.setValidacionHabilitada(true);
        }

        this.lb_error.setText("");
    }

    private void crearFormulario() {
        // Elementos del formulario susceptibles de validarse o resetearse 
        formulario.add(t_factura2);
        formulario.add(t_factura3);
        formulario.add(jTextArea);
    }

    @Override
    public void addError(ValidationFormException e) {
        lb_error.setText(e.getMessage());
    }

    public void addError(DocumentoException e) {
        lb_error.setText(e.getMessage());
    }

    @Override
    public void clearError() {
        lb_error.setText("");
    }

    private void inicializaValidacion() {
        t_factura1.addValidador(new ValidadorObligatoriedad(), this);
        t_factura1.addValidador(new ValidadorTexto(3, true), this);
        t_factura2.addValidador(new ValidadorObligatoriedad(), this);
        t_factura2.addValidador(new ValidadorTexto(3, true), this);
        t_factura3.addValidador(new ValidadorObligatoriedad(), this);
        jTextArea.addValidador(new ValidadorObligatoriedad(), this);

    }

    private void validarFormulario() throws ValidationFormException {
        for (IValidableForm e : formulario) {
            try {
                e.validar();
            } catch (ValidationFormException ex) {
                throw ex;
            }
        }
    }

    public String getIdFactura(String caja) throws ContadorException {
        Long valor = ServicioContadoresCaja.obtenerContadorFacturaAnterior(caja);
        if (valor != null) {
            Long numeroanterior = valor - 1;
            String idvalor = numeroanterior.toString();
            String a = new Long(idvalor).toString();
            String b = new Long(idvalor).toString();
            for (int i = a.length(); i < 9; i++) {
                b = "0" + b;
            }

            return Sesion.getTienda().getCodalm() + "-" + caja + "-" + b;
        } else {
            return "";
        }
    }

    public void iniciaVista() {
        limpiarFormulario();
        t_factura2.requestFocus();

        try {
            if (Sesion.getCajaActual().getCajaActual() != null) {
                this.factura.setText(getIdFactura(Sesion.getCajaActual().getCajaActual().getCodcaja()));
            }
        } catch (ContadorException ex) {
            java.util.logging.Logger.getLogger(JReimpresionFactura.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (tipo.equals(DocumentosBean.FACTURA)) {
            l_documento.setText("Factura: ");
            l_documento.setDisplayedMnemonic('F');
        }
        if (tipo.equals(DocumentosBean.NOTA_CREDITO)) {
            l_documento.setText("Nota de Crédito: ");
            l_documento.setDisplayedMnemonic('N');
        }
        if (tipo.equals(DocumentosBean.GIFTCARD) || tipo.equals(DocumentosBean.GIFTCARD_P)) {
            l_documento.setText("Recibo: ");
            l_documento.setDisplayedMnemonic('R');
        }
        if (tipo.equals(DocumentosBean.CREDITO_ABONO) || tipo.equals(DocumentosBean.LETRA_ABONO)) {
            l_documento.setText("Recibo de Pago: ");
            l_documento.setDisplayedMnemonic('R');
        }
        t_factura1.setText(VariablesAlm.getVariable(VariablesAlm.COD_ALMACEN));

//        b_previsualizar.setVisible(false);
    }

    @Override
    public void accionLeerTarjetaVD() {
    }

    /**
     * @author Gabriel Simbania
     * @param documentoBean
     * @return
     * @throws TicketException
     * @throws DocumentoException
     */
    private DocumentosBean generarCabecera(DocumentosBean documentoBean) throws TicketException, DocumentoException {
        if (documentoBean == null && tipo.equals(DocumentosBean.FACTURA)) {
            TicketsAlm ticketAlm = null;
            try {
                ticketAlm = TicketsDao.consultarTicket(Long.parseLong(t_factura3.getText()), t_factura2.getText(), t_factura1.getText());
            } catch (Exception ex) {
            }

            if (ticketAlm != null) {
                SqlSession session = new SqlSession();
                try {

                    session.openSession(SessionFactory.openSession());
                    documentoBean = new DocumentosBean();
                    documentoBean.setUidDocumento(UUID.randomUUID().toString());
                    documentoBean.setTipo(DocumentosBean.FACTURA);
                    documentoBean.setCodAlmacen(ticketAlm.getCodAlm());
                    documentoBean.setCodCaja(ticketAlm.getCodCaja());
                    documentoBean.setFecha(new Fecha(ticketAlm.getFecha()));
                    documentoBean.setIdDocumento(String.valueOf(ticketAlm.getIdTicket()));
                    documentoBean.setCodCliente(ticketAlm.getCodCli());
                    documentoBean.setEstado("V");
                    documentoBean.setUsuario(ticketAlm.getUsuario());
                    documentoBean.setCodCajaEmision(ticketAlm.getCodCaja());
                    documentoBean.setNumTransaccion(ticketAlm.getCodAlm() + "-" + ticketAlm.getCodCaja() + "-" + String.format("%09d", ticketAlm.getIdTicket()));
                    documentoBean.setMonto(ticketAlm.getTotalConDstoConIva());
                    documentoBean.setObservaciones("GENERADO AL REIMPRIMIR");
                    documentoBean.setImpresos(new ArrayList<DocumentosImpresosBean>());
                    DocumentosService.crearDocumento(documentoBean, DocumentosBean.FACTURA, session);
                    session.commit();

                } catch (Exception ex) {
                    session.rollback();
                    throw new TicketException(ex.getMessage());
                }
            }
        }
        return documentoBean;
    }
}
