package com.comerzzia.jpos.gui.reimpresion.pendientereserva;

import com.comerzzia.jpos.entity.db.Bono;
import com.comerzzia.jpos.entity.db.MotivoDevolucion;
import com.comerzzia.jpos.entity.db.PendienteProcesar;
import com.comerzzia.jpos.entity.db.ReservaProcesar;
import com.comerzzia.jpos.entity.services.reservaciones.Reservacion;
import com.comerzzia.jpos.gui.IVista;
import com.comerzzia.jpos.gui.JPrincipal;
import com.comerzzia.jpos.gui.components.JVentanaDialogo;
import com.comerzzia.jpos.gui.modelos.foco.POSFocusTraversalPolicy;
import com.comerzzia.jpos.gui.reimpresion.pendientereserva.modelos.MostrarPendienteProcesarCellRenderer;
import com.comerzzia.jpos.gui.reimpresion.pendientereserva.modelos.MostrarPendienteProcesarTableModel;
import com.comerzzia.jpos.gui.reimpresion.pendientereserva.modelos.MostrarReservaProcesarCellRenderer;
import com.comerzzia.jpos.gui.reimpresion.pendientereserva.modelos.MostrarReservaProcesarTableModel;
import com.comerzzia.jpos.gui.validation.ValidationFormException;
import com.comerzzia.jpos.persistencia.logs.logskdx.LogKardexBean;
import com.comerzzia.jpos.persistencia.promociones.pendiente.PendienteEntregaProcesarDao;
import com.comerzzia.jpos.persistencia.promociones.reserva.ReservaProcesarDao;
import com.comerzzia.jpos.persistencia.reservaciones.reserva.ReservaBean;
import com.comerzzia.jpos.persistencia.reservaciones.reservaarticulo.ReservaArticuloBean;
import com.comerzzia.jpos.servicios.bonos.BonosServices;
import com.comerzzia.jpos.servicios.core.variables.Variables;
import com.comerzzia.jpos.servicios.devoluciones.Devolucion;
import com.comerzzia.jpos.servicios.devoluciones.DevolucionesServices;
import com.comerzzia.jpos.servicios.login.Sesion;
import com.comerzzia.jpos.servicios.reservaciones.ReservacionesServicios;
import com.comerzzia.jpos.servicios.reservaciones.ReservasException;
import com.comerzzia.jpos.servicios.stock.ServicioStock;
import com.comerzzia.jpos.servicios.stock.StockException;
import com.comerzzia.jpos.servicios.tickets.componentes.LineaTicket;
import com.comerzzia.jpos.util.EnumTipoDocumento;
import es.mpsistemas.util.fechas.Fecha;
import es.mpsistemas.util.log.Logger;
import java.awt.DefaultKeyboardFocusManager;
import java.awt.Image;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URL;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import javax.imageio.ImageIO;

/**
 *
 * @author Gabriel Simbania
 */
public class JPendienteReserva extends JVentanaDialogo implements IVista, FocusListener {

    private static final long serialVersionUID = 8829392670352767586L;

    DefaultKeyboardFocusManager myFocusmgr = new DefaultKeyboardFocusManager();
    private static Logger log = Logger.getMLogger(JPendienteReserva.class);
    POSFocusTraversalPolicy politicaDeFoco;
    private String tipo;
    List<PendienteProcesar> pendientes;
    List<ReservaProcesar> reservas;

    public JPendienteReserva() {
        super();
        initComponents();
        try {
            String prefijo = Variables.getVariable(Variables.POS_UI_SKIN);
            URL myurl = this.getClass().getResource("/skin/" + prefijo + "/" + prefijo + "_guia_remision.png");
            this.setImagenFondo((Image) ImageIO.read(new File(myurl.getPath())));

        } catch (IOException ex) {
            log.error("No se pudo cargar la imagen de fondo de cierre de caja");
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        js_tb_cierre_caja = new javax.swing.JScrollPane();
        tb_pendiente_entrega = new javax.swing.JTable();
        js_tb_cierre_caja1 = new javax.swing.JScrollPane();
        tb_reservacion = new javax.swing.JTable();
        jLabel21 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        b_generaNC = new com.comerzzia.jpos.gui.components.form.JButtonForm();
        b_generaBono = new com.comerzzia.jpos.gui.components.form.JButtonForm();
        m_ventas = new javax.swing.JPanel();
        lb_info1 = new javax.swing.JLabel();
        lb_info2 = new javax.swing.JLabel();
        lb_info3 = new javax.swing.JLabel();

        setFocusable(false);
        setMaximumSize(new java.awt.Dimension(1024, 723));
        setMinimumSize(new java.awt.Dimension(1024, 723));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setOpaque(false);

        js_tb_cierre_caja.setBorder(null);

        tb_pendiente_entrega.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "No Factura", "Cliente", "Nombre Cliente", "Cod. Artículo", "Descripción"
            }
        ));
        tb_pendiente_entrega.setRequestFocusEnabled(false);
        tb_pendiente_entrega.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tb_pendiente_entregaKeyPressed(evt);
            }
        });
        js_tb_cierre_caja.setViewportView(tb_pendiente_entrega);

        js_tb_cierre_caja1.setBorder(null);

        tb_reservacion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tb_reservacion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "No Reserva", "Cliente", "Nombre Cliente", "Cuota Inicial"
            }
        ));
        tb_reservacion.setRequestFocusEnabled(false);
        tb_reservacion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tb_reservacionKeyPressed(evt);
            }
        });
        js_tb_cierre_caja1.setViewportView(tb_reservacion);

        jLabel21.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel21.setText("RESERVACIÓN");
        jLabel21.setFocusable(false);

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel1.setText("PENDIENTE DE ENTREGA");
        jLabel1.setFocusable(false);

        b_generaNC.setMnemonic('f');
        b_generaNC.setText("Generar N/C");
        b_generaNC.setAlignmentY(0.2F);
        b_generaNC.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        b_generaNC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_generaNCActionPerformed(evt);
            }
        });

        b_generaBono.setMnemonic('f');
        b_generaBono.setText("Generar Bono");
        b_generaBono.setAlignmentY(0.2F);
        b_generaBono.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        b_generaBono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_generaBonoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(325, 325, 325)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(320, 320, 320)
                                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(js_tb_cierre_caja1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(js_tb_cierre_caja, javax.swing.GroupLayout.DEFAULT_SIZE, 930, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(b_generaNC, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(b_generaBono, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(js_tb_cierre_caja, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel21))
                    .addComponent(b_generaNC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(js_tb_cierre_caja1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_generaBono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 950, 490));

        m_ventas.setBackground(new java.awt.Color(255, 255, 255));
        m_ventas.setFocusCycleRoot(true);
        m_ventas.setOpaque(false);
        m_ventas.setRequestFocusEnabled(false);
        m_ventas.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        add(m_ventas, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 600, 500, -1));
        add(lb_info1, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 440, 220, 20));
        add(lb_info2, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 470, 220, 20));
        add(lb_info3, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 490, 220, 20));
    }// </editor-fold>//GEN-END:initComponents

    private void tb_pendiente_entregaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tb_pendiente_entregaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_TAB && evt.isShiftDown()) {
            tb_pendiente_entrega.transferFocusBackward();
        } else if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            tb_pendiente_entrega.transferFocus();
        }
    }//GEN-LAST:event_tb_pendiente_entregaKeyPressed

    private void tb_reservacionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tb_reservacionKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_TAB && evt.isShiftDown()) {
            tb_reservacion.transferFocusBackward();
        } else if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            tb_reservacion.transferFocus();
        }
    }//GEN-LAST:event_tb_reservacionKeyPressed

    private void b_generaNCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_generaNCActionPerformed
        generaNotaCredito();
    }//GEN-LAST:event_b_generaNCActionPerformed

    private void b_generaBonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_generaBonoActionPerformed
        generaBonoReserva();
    }//GEN-LAST:event_b_generaBonoActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.comerzzia.jpos.gui.components.form.JButtonForm b_generaBono;
    private com.comerzzia.jpos.gui.components.form.JButtonForm b_generaNC;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane js_tb_cierre_caja;
    private javax.swing.JScrollPane js_tb_cierre_caja1;
    private javax.swing.JLabel lb_info1;
    private javax.swing.JLabel lb_info2;
    private javax.swing.JLabel lb_info3;
    private javax.swing.JPanel m_ventas;
    private javax.swing.JTable tb_pendiente_entrega;
    private javax.swing.JTable tb_reservacion;
    // End of variables declaration//GEN-END:variables

    @Override
    public void iniciaVista() {
        JPrincipal.setPanelActivo(this);
        b_generaNC.requestFocus();
        // llamada a la regeneración de la vista
        refrescarTabla();

    }

    private void refrescarTabla() {
        refrescarTablaPendienteEntrega();
        refrescarTablaReservaciones();
    }

    /**
     * @author Gabriel Simbania
     */
    private void refrescarTablaPendienteEntrega() {
        try {

            pendientes = PendienteEntregaProcesarDao.consultaPendienteEntregaProcesar();
            MostrarPendienteProcesarTableModel modelo = new MostrarPendienteProcesarTableModel(pendientes);
            tb_pendiente_entrega.setModel(modelo);
            tb_pendiente_entrega.setDefaultRenderer(Object.class, new MostrarPendienteProcesarCellRenderer());
            dibujarTablaPendiente();

        } catch (Exception ex) {
            log.error("No se pudo recargar la Interfaz de Pendiente de Entrega", ex);
        }
    }

    /**
     * @author Gabriel Simbania
     */
    private void dibujarTablaPendiente() {
        tb_pendiente_entrega.getColumnModel().getColumn(0).setPreferredWidth(90);
        tb_pendiente_entrega.getColumnModel().getColumn(1).setPreferredWidth(75);
        tb_pendiente_entrega.getColumnModel().getColumn(2).setPreferredWidth(200);
        tb_pendiente_entrega.getColumnModel().getColumn(3).setPreferredWidth(50);
        tb_pendiente_entrega.getColumnModel().getColumn(4).setPreferredWidth(50);
        tb_pendiente_entrega.getColumnModel().getColumn(5).setPreferredWidth(250);
    }

    /**
     * @author Gabriel Simbania
     */
    private void refrescarTablaReservaciones() {
        try {

            reservas = ReservaProcesarDao.consultaReservaProcesar();
            MostrarReservaProcesarTableModel modeloReserva = new MostrarReservaProcesarTableModel(reservas);
            tb_reservacion.setModel(modeloReserva);
            tb_reservacion.setDefaultRenderer(Object.class, new MostrarReservaProcesarCellRenderer());
            dibujarTablaReservacion();

        } catch (Exception ex) {
            log.error("No se pudo recargar la Interfaz de Pendiente de Entrega", ex);
        }
    }

    /**
     * @author Gabriel Simbania
     */
    private void dibujarTablaReservacion() {
        tb_pendiente_entrega.getColumnModel().getColumn(0).setPreferredWidth(90);
        tb_pendiente_entrega.getColumnModel().getColumn(1).setPreferredWidth(75);
        tb_pendiente_entrega.getColumnModel().getColumn(2).setPreferredWidth(200);
        tb_pendiente_entrega.getColumnModel().getColumn(3).setPreferredWidth(50);
        tb_pendiente_entrega.getColumnModel().getColumn(5).setPreferredWidth(250);
    }

    /**
     * @author Gabriel Simbania
     */
    private void generaBonoReserva() {
        if (JPrincipal.getInstance().crearVentanaConfirmacion("¿Está seguro que desea generar los bonos?")) {
            boolean tieneError = Boolean.FALSE;
            for (ReservaProcesar res : reservas) {
                try {
                    Bono bono = null;
                    String[] num = res.getNumReserva().split("-");
                    ReservaBean reserva = ReservacionesServicios.consultaById(new BigInteger(num[2]));
                    if(reserva.getLiquidado() ){
                        throw new Exception("La reserva esta liquidada");
                    }
                    if(reserva.getCancelado() ){
                        throw new Exception("La reserva esta cancelada");
                    }
                    Reservacion reservacion = new Reservacion(reserva);
                    reservacion.calculaTotales();

                    reservacion.getReservacion().setCancelado(true);
                    reservacion.getReservacion().setProcesadoTienda(false);
                    reservacion.getReservacion().setFechaLiquidacion(new Fecha());
                    ReservacionesServicios.modificarReserva(reservacion.getReservacion());

                    // Actualizamos los stocks
                    if (Variables.getVariableAsBoolean(Variables.FUNCIONALIDAD_CONSULTA_STOCK) || Variables.getVariableAsBoolean(Variables.FUNCIONALIDAD_KARDEX_POS)) {
                        accionActualizarStock(reservacion);
                    }
                    
                    if (reservacion.getAbonosRestantesReales().compareTo(BigDecimal.ZERO) > 0) {
                        bono = BonosServices.crearBonoReserva(reservacion.getAbonosRestantesReales(), reservacion.getReservacion().getCodReservacion().toString(), BonosServices.PROCEDENCIA_RESERVA_CANCELACION, reservacion.getReservacion().getCliente(), reservacion.getDescuentoEnReserva(), reservacion.getObservaciones(), reservacion.getReservacion().getUidReservacion());
                    }else{
                        //G.S. Cuando se anula la reserva afecta al kardex
                        ReservacionesServicios.generarKardexReserva(reservacion.getReservacion(), EnumTipoDocumento.BONO);
                    }

                    res.setProcesado("S");
                    res.setIdUsuarioAprobacion(Sesion.getUsuario().getIdUsuario());
                    if (bono != null) {
                        res.setIdBono(bono.getBonoPK().getIdBono());
                    }
                    res.setFechaAprobacion(new Date());
                    ReservacionesServicios.modificarReservaProcesar(res);

                } catch (ReservasException ex) {
                    log.error("Error al anular la reserva ");
                    tieneError = Boolean.TRUE;
                    res.setErrorProceso(ex.getMessage());
                    try {
                        ReservacionesServicios.modificarReservaProcesar(res);
                    } catch (ReservasException ex1) {
                        log.error("Error al anular la reserva ");
                    }
                } catch (Exception ex) {
                    log.error("Error al anular la reserva: " + ex.getMessage(), ex);
                    tieneError = Boolean.TRUE;
                    res.setErrorProceso(ex.getMessage());
                    try {
                        ReservacionesServicios.modificarReservaProcesar(res);
                    } catch (ReservasException ex1) {
                        log.error("Error al anular la reserva ");
                    }

                }
            }
            if (tieneError) {
                JPrincipal.getInstance().crearAdvertencia("Se ejecuto el proceso pero hubo errores.");
            } else {
                JPrincipal.getInstance().crearInformacion("Se crearon los bonos con \u00E9xito");
            }
            refrescarTabla();
        }

    }

    /**
     * @author Gabriel Simbania
     * @param reservacion
     */
    private void accionActualizarStock(Reservacion reservacion) {
        try {
            LogKardexBean logKardex = new LogKardexBean();
            logKardex.setTipoAccion(LogKardexBean.tipoAccionReservacion);
            logKardex.setFactura(String.valueOf(reservacion.getReservacion().getCodReservacion()));
            logKardex.setUsuarioAutorizacion(Sesion.getUsuario().getUsuario());
            for (ReservaArticuloBean ra : reservacion.getReservacion().getReservaArticuloList()) {
                if (!ra.getComprado()) {
                    log.debug("accionActualizarStock() - Disminuyendo stock de Artículo");
                    ServicioStock.disminuyeStockReserva(ra.getCodMarca(), ra.getIdItem(), 1, logKardex);
                    ServicioStock.actualizaKardex(ra.getCodart(), ServicioStock.MOVIMIENTO_52, Sesion.getTienda().getCodalm(), 1L);
                    
                }
            }
        } catch (StockException ex) {
            log.error("removeArticulosReserva() - STOCK: No fué posible disminuir el stock reservado para el artículo");
        }

    }
    
    /**
     * @author Gabriel Simbania
     * @param reservacion
     */
    private void accionActualizarStockKardex(Reservacion reservacion) {
        try {
            LogKardexBean logKardex = new LogKardexBean();
            logKardex.setTipoAccion(LogKardexBean.tipoAccionReservacion);
            logKardex.setFactura(String.valueOf(reservacion.getReservacion().getCodReservacion()));
            logKardex.setUsuarioAutorizacion(Sesion.getUsuario().getUsuario());
            for (ReservaArticuloBean ra : reservacion.getReservacion().getReservaArticuloList()) {
                if (!ra.getComprado()) {
                    log.debug("accionActualizarStock() - Disminuyendo stock de Artículo");
                    ServicioStock.actualizaKardex(ra.getCodart(), ServicioStock.MOVIMIENTO_52, Sesion.getTienda().getCodalm(), 1L);
                    
                }
            }
        } catch (StockException ex) {
            log.error("removeArticulosReserva() - STOCK: No fué posible disminuir el stock reservado para el artículo");
        }

    }

    /**
     *
     */
    public void generaNotaCredito() {
        if (JPrincipal.getInstance().crearVentanaConfirmacion("¿Está seguro que desea generar las N/C?")) {
            LinkedHashMap<String, List> listaAgrupada = creaListaFactura();
            boolean tieneError = Boolean.FALSE;
            for (Map.Entry<String, List> entry : listaAgrupada.entrySet()) {
                List<PendienteProcesar> listaNueva = new ArrayList<>();
                try {
                    listaNueva = entry.getValue();
                    PendienteProcesar porProcesar = listaNueva.get(0);
                    String[] factura = porProcesar.getNumFactura().split("-");
                    MotivoDevolucion motivoDevolucion = new MotivoDevolucion(4, "OTROS");
                    //motivoDevolucion.setDescripcionMotivo("DEVOLUCI\u00D3N AUTOM\u00C1TICA");
                    String resultDevolucion=Sesion.iniciaNuevaDevolucion(factura[0], factura[1], factura[2], motivoDevolucion, "OK", "DEVOLUCI\u00D3N AUTOM\u00C1TICA", null, null,false);
                    Devolucion devolucion = Sesion.getDevolucion();
                    List<LineaTicket> lineasAgregar = new ArrayList<>();

                    if(resultDevolucion!=null){
                        throw new Exception(resultDevolucion);
                    }
                    for (LineaTicket linea : devolucion.getTicketDevolucion().getLineas().getLineas()) {
                        for (PendienteProcesar proceso : listaNueva) {
                            if (linea.getLineaOriginal() == proceso.getIdLinea() && proceso.getCodArt().equals(linea.getArticulo().getCodart())) {
                                lineasAgregar.add(linea);
                            }
                        }
                    }
                    
                    if(lineasAgregar.isEmpty()){
                        throw new Exception("El art\u00EDculo ya fue devuelto");
                    }
                    
                    devolucion.getTicketDevolucion().getLineas().setLineas(lineasAgregar);
                    devolucion.getTicketDevolucion().getTotales().recalcularTotalesLineas(devolucion.getTicketDevolucion().getLineas());
                    devolucion.getTicketDevolucion().getTotales().redondear();

                    DevolucionesServices.crearDevolucion(Sesion.getDevolucion(),false);

                    for (PendienteProcesar proceso : listaNueva) {
                        proceso.setProcesado("S");
                        proceso.setFechaAprobacion(new Date());
                        proceso.setIdUsuarioAprobacion(Sesion.getUsuario().getIdUsuario());
                        proceso.setUidNotaCredito(devolucion.getNotaCredito().getUidNotaCredito());
                        PendienteEntregaProcesarDao.modificarPendienteProcesar(proceso);
                    }

                } catch (ValidationFormException ex) {
                    log.error("generaNotaCredito() - Error validacion",ex);
                    tieneError = Boolean.TRUE;
                    for (PendienteProcesar proceso : listaNueva) {
                        proceso.setErrorProceso(ex.getMessage());
                        try {
                            PendienteEntregaProcesarDao.modificarPendienteProcesar(proceso);
                        } catch (ReservasException ex1) {
                            log.error("generaNotaCredito() - Error validacion",ex1);
                        }
                    }
                } catch (Exception ex) {
                    log.error("generaNotaCredito() - Error generar N/C " + ex.getMessage(),ex);
                    tieneError = Boolean.TRUE;
                    for (PendienteProcesar proceso : listaNueva) {
                        proceso.setErrorProceso(ex.getMessage());
                        try {
                            PendienteEntregaProcesarDao.modificarPendienteProcesar(proceso);
                        } catch (ReservasException ex1) {
                            log.error("generaNotaCredito() - Error validacion",ex1);
                        }
                    }
                }
            }
            refrescarTabla();
            if (tieneError) {
                JPrincipal.getInstance().crearAdvertencia("Se ejecuto el proceso pero hubo errores.");
            } else {
                JPrincipal.getInstance().crearInformacion("Se crearon las notas de cr\u00E9dito");
            }

        }
    }

    /**
     * @author Gabriel Simbania
     * @return
     */
    public LinkedHashMap<String, List> creaListaFactura() {

        LinkedHashMap<String, List> listaTicket = new LinkedHashMap<>();
        for (PendienteProcesar pendiente : pendientes) {
            List<PendienteProcesar> lista = listaTicket.get(pendiente.getTicketsAlm().getUidTicket());
            if(pendiente.getErrorProceso()==null){
                if (lista != null) {
                    lista.add(pendiente);
                } else {
                    lista = new ArrayList<>();
                    lista.add(pendiente);
                    listaTicket.put(pendiente.getTicketsAlm().getUidTicket(), lista);
                }
            }
        }

        return listaTicket;
    }

    @Override
    public void iniciaFoco() {
        log.info("Iniciando Foco");

    }

    @Override
    public void focusGained(FocusEvent fe) {
    }

    @Override
    public void focusLost(FocusEvent fe) {
    }

    public String getTipo() {
        return tipo;
    }

    public void setTipo(String tipo) {
        this.tipo = tipo;
    }

    @Override
    public void accionAceptar() {
    }

    @Override
    public void accionLeerTarjetaVD() {
    }

    @Override
    public void limpiarFormulario() {
    }

}
