/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * JReimpresionFactura.java
 *
 * Created on 11-mar-2014, 16:47:03
 */
package com.comerzzia.jpos.gui.reimpresion.tipos;

import com.comerzzia.jpos.gui.JPrincipal;
import com.comerzzia.jpos.gui.components.JVentanaDialogo;
import com.comerzzia.jpos.gui.validation.IValidableForm;
import com.comerzzia.jpos.gui.validation.IViewerValidationFormError;
import com.comerzzia.jpos.gui.validation.ValidadorObligatoriedad;
import com.comerzzia.jpos.gui.validation.ValidadorTexto;
import com.comerzzia.jpos.gui.validation.ValidationFormException;
import com.comerzzia.jpos.persistencia.print.documentos.DocumentosBean;
import com.comerzzia.jpos.servicios.core.contadores.ContadorException;
import com.comerzzia.jpos.servicios.core.contadores.caja.ServicioContadoresCaja;
import com.comerzzia.jpos.servicios.core.variables.Variables;
import com.comerzzia.jpos.servicios.core.variables.VariablesAlm;
import com.comerzzia.jpos.servicios.login.Sesion;
import com.comerzzia.jpos.servicios.print.PrintServices;
import com.comerzzia.jpos.servicios.print.documentos.DocumentoException;
import com.comerzzia.jpos.servicios.print.documentos.DocumentosService;
import es.mpsistemas.util.log.Logger;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;

/**
 *
 * @author SMLM
 */
public class JReimpresionDocumento extends JVentanaDialogo implements IViewerValidationFormError {

    private static Logger log = Logger.getMLogger(JReimpresionDocumento.class);
    List<IValidableForm> formulario;
    String tipo = null;

    /**
     * Creates new form JReimpresionFactura
     */
    public JReimpresionDocumento() {
        super();

        try {
            formulario = new LinkedList<IValidableForm>();
            initComponents();

            //creamos la validación
            inicializaValidacion();
            //creamos el formulario
            crearFormulario();

            t_factura1.setText(VariablesAlm.getVariable(VariablesAlm.COD_ALMACEN));
            registraEventoEnterBoton();
        } catch (Exception e) {

        }
    }

    /**
     * Creates new form JReimpresionFactura
     */
    public JReimpresionDocumento(String tipo) {
        super();
        this.tipo = tipo;
        try {
            formulario = new LinkedList<IValidableForm>();
            initComponents();

            //creamos la validación
            inicializaValidacion();
            //creamos el formulario
            crearFormulario();

            if (tipo.equals(DocumentosBean.FACTURA)) {
                l_documento.setText("Factura: ");
                l_documento.setDisplayedMnemonic('F');
            }
            if (tipo.equals(DocumentosBean.NOTA_CREDITO)) {
                l_documento.setText("Nota de Crédito: ");
                l_documento.setDisplayedMnemonic('N');
            }
            if (tipo.equals(DocumentosBean.GIFTCARD) || tipo.equals(DocumentosBean.GIFTCARD_P)) {
                l_documento.setText("Recibo: ");
                l_documento.setDisplayedMnemonic('R');
            }
            if (tipo.equals(DocumentosBean.CREDITO_ABONO) || tipo.equals(DocumentosBean.LETRA_ABONO)) {
                l_documento.setText("Recibo de Pago: ");
                l_documento.setDisplayedMnemonic('R');
            }

            t_factura1.setText(VariablesAlm.getVariable(VariablesAlm.COD_ALMACEN));
            registraEventoEnterBoton();
        } catch (Exception e) {

        }
    }

    public void setTipo(String tipo) {
        this.tipo = tipo;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sesion1 = new com.comerzzia.jpos.servicios.login.Sesion();
        l_documento = new javax.swing.JLabel();
        t_factura1 = new com.comerzzia.jpos.gui.components.form.JTextFieldForm();
        t_factura2 = new com.comerzzia.jpos.gui.components.form.JTextFieldForm();
        t_factura3 = new com.comerzzia.jpos.gui.components.form.JTextFieldForm();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        b_cancelar = new com.comerzzia.jpos.gui.components.form.JButtonForm();
        b_previsualizar = new com.comerzzia.jpos.gui.components.form.JButtonForm();
        lb_error = new javax.swing.JLabel();
        b_aceptar1 = new com.comerzzia.jpos.gui.components.form.JButtonForm();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextArea = new com.comerzzia.jpos.gui.components.form.JTextAreaForm();
        jLabel1 = new javax.swing.JLabel();
        factura = new javax.swing.JLabel();
        l_factura_cabecera1 = new javax.swing.JLabel();
        chkVoucher = new javax.swing.JCheckBox();

        setMaximumSize(new java.awt.Dimension(520,270));
        setMinimumSize(new java.awt.Dimension(520,370));

        l_documento.setDisplayedMnemonic('f');
        l_documento.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        l_documento.setLabelFor(t_factura2);
        l_documento.setAlignmentY(0.0F);

        t_factura1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        t_factura1.setNextFocusableComponent(t_factura2);

        t_factura2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        t_factura2.setNextFocusableComponent(t_factura3);
        t_factura2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_factura2ActionPerformed(evt);
            }
        });

        t_factura3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        t_factura3.setNextFocusableComponent(b_previsualizar);

        jLabel4.setText("-");

        jLabel5.setText("-");

        jLabel6.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel6.setText("REIMPRESIÓN");

        b_cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/comerzzia/jpos/imagenes/iconos/cancelar.png"))); // NOI18N
        b_cancelar.setText("Cancelar");
        b_cancelar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        b_cancelar.setNextFocusableComponent(t_factura1);
        b_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_cancelarActionPerformed(evt);
            }
        });

        b_previsualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/comerzzia/jpos/imagenes/iconos/aceptar.png"))); // NOI18N
        b_previsualizar.setMnemonic('P');
        b_previsualizar.setText("Previsualizar");
        b_previsualizar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        b_previsualizar.setNextFocusableComponent(b_aceptar1);
        b_previsualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_previsualizarActionPerformed(evt);
            }
        });

        lb_error.setForeground(new java.awt.Color(204, 0, 0));

        b_aceptar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/comerzzia/jpos/imagenes/iconos/aceptar.png"))); // NOI18N
        b_aceptar1.setMnemonic('a');
        b_aceptar1.setText("Aceptar");
        b_aceptar1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        b_aceptar1.setNextFocusableComponent(b_cancelar);
        b_aceptar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_aceptar1ActionPerformed(evt);
            }
        });

        TextArea.setColumns(20);
        TextArea.setRows(5);
        jScrollPane1.setViewportView(TextArea);

        jLabel1.setText("Motivo Reimpresión");

        factura.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        factura.setForeground(new java.awt.Color(0, 0, 204));
        factura.setText("ID");
        factura.setFocusable(false);

        l_factura_cabecera1.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        l_factura_cabecera1.setText("Último Documento:");
        l_factura_cabecera1.setFocusable(false);

        chkVoucher.setText("VOUCHER");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(213, 213, 213)
                                        .addComponent(jLabel1))
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(319, 319, 319))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(l_documento, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(chkVoucher)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(t_factura1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(t_factura2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(t_factura3, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lb_error, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addGap(22, 22, 22))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(b_previsualizar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(b_aceptar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(b_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(l_factura_cabecera1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(factura, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(205, 205, 205))
            .addGroup(layout.createSequentialGroup()
                .addGap(181, 181, 181)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(factura, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(l_factura_cabecera1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(lb_error, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(l_documento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(t_factura1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(t_factura2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(t_factura3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5)))))
                .addGap(18, 18, 18)
                .addComponent(chkVoucher)
                .addGap(1, 1, 1)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b_previsualizar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_aceptar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void b_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_cancelarActionPerformed
        accionCancelar();
}//GEN-LAST:event_b_cancelarActionPerformed

    private void b_previsualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_previsualizarActionPerformed
        accionPrevisualizar();
}//GEN-LAST:event_b_previsualizarActionPerformed

    private void b_aceptar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_aceptar1ActionPerformed
        accionAceptar();
    }//GEN-LAST:event_b_aceptar1ActionPerformed

    private void t_factura2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_factura2ActionPerformed
        /**
         * Completar el campo ID
         */
        String texto = t_factura2.getText();
        if (!texto.equals("")) {

            int contador = 3;

            while (contador > t_factura2.getText().length()) {
                t_factura2.setText("0" + t_factura2.getText());

            }
            if (tipo.equals(DocumentosBean.FACTURA)) {

            }
            if (tipo.equals(DocumentosBean.NOTA_CREDITO)) {
                try {
                    this.factura.setText(getIdNotaCredito(t_factura2.getText()));
                } catch (ContadorException ex) {
                    java.util.logging.Logger.getLogger(JReimpresionDocumento.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            if (tipo.equals(DocumentosBean.GIFTCARD) || tipo.equals(DocumentosBean.GIFTCARD_P)) {
                try {
                    if (tipo.equals(DocumentosBean.GIFTCARD)) {
                        this.factura.setText(getIdGifcard(t_factura2.getText()));
                    } else {
                        this.factura.setText(getIdGifcardUso(t_factura2.getText()));
                    }
                } catch (ContadorException ex) {
                    java.util.logging.Logger.getLogger(JReimpresionDocumento.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (tipo.equals(DocumentosBean.CREDITO_ABONO) || tipo.equals(DocumentosBean.LETRA_ABONO)) {
                try {
                    if (tipo.equals(DocumentosBean.CREDITO_ABONO)) {
                        this.factura.setText(getIdAbonoCredito(t_factura2.getText()));
                    } else {
                        this.factura.setText(getIdAbonoLetraAbono(t_factura2.getText()));
                    }

                } catch (ContadorException ex) {
                    java.util.logging.Logger.getLogger(JReimpresionDocumento.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }

    }//GEN-LAST:event_t_factura2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.comerzzia.jpos.gui.components.form.JTextAreaForm TextArea;
    private com.comerzzia.jpos.gui.components.form.JButtonForm b_aceptar1;
    private com.comerzzia.jpos.gui.components.form.JButtonForm b_cancelar;
    private com.comerzzia.jpos.gui.components.form.JButtonForm b_previsualizar;
    private javax.swing.JCheckBox chkVoucher;
    private javax.swing.JLabel factura;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel l_documento;
    private javax.swing.JLabel l_factura_cabecera1;
    private javax.swing.JLabel lb_error;
    private com.comerzzia.jpos.servicios.login.Sesion sesion1;
    private com.comerzzia.jpos.gui.components.form.JTextFieldForm t_factura1;
    private com.comerzzia.jpos.gui.components.form.JTextFieldForm t_factura2;
    private com.comerzzia.jpos.gui.components.form.JTextFieldForm t_factura3;
    // End of variables declaration//GEN-END:variables

    @Override
    public void accionAceptar() {
        try {
            validarFormulario();
            Calendar calFecha = new GregorianCalendar();
            Calendar calendarSys = Calendar.getInstance();
            DocumentosBean documentoBean = DocumentosService.consultarDocByUniqueKey(this.tipo, t_factura1.getText(), t_factura2.getText(), t_factura3.getText());
            calFecha.setTime(documentoBean.getFecha().getDate());
            int difHoras = (calendarSys.get(Calendar.HOUR_OF_DAY) - calFecha.get(Calendar.HOUR_OF_DAY));
            int difMinutos = (calendarSys.get(Calendar.MINUTE) - calFecha.get(Calendar.MINUTE));
            int minutos = (difHoras * 60) + difMinutos;
            if (documentoBean != null) {
                if (tipo.equals(DocumentosBean.FACTURA)) {
                    boolean imprimirVoucher = JPrincipal.getInstance().crearVentanaConfirmacion("¿Desea reimprimir los voucher de pago?", "Sí", "No");
                    PrintServices.getInstance().reimpresionFactura(documentoBean, false, true, imprimirVoucher, false, false, "", false);
                }
                if (tipo.equals(DocumentosBean.NOTA_CREDITO)) {
                    String variablesNCR = Variables.getVariable(Variables.VARIABLES_TIEMPO_REIMPRESION_NOTA_CREDITO);
                    if ((minutos > 0 && minutos <= Integer.valueOf(variablesNCR)) || Variables.getVariable(Variables.ACTIVO_TIEMPO_REIMPRESION).equals("N")) {
                        if (TextArea.getText().length() >= 100) {
                            PrintServices.getInstance().reimpresionNotaCredito(documentoBean, false, TextArea.getText());
                            Sesion.setReimpresionNC("N");
                            accionCancelar();
                        } else {
                            this.contenedor.setVisible(false);
                            JPrincipal.getInstance().crearAdvertencia("No se puede realizar la reimpresión debe colocar mínimo 100 caracteres ");
                            this.contenedor.setVisible(true);
                            log.info("No se puede realizar la reimpresión debe colocar mínimo 100 caracteres ");
                        }

                    } else {
                        this.contenedor.setVisible(false);
                        JPrincipal.getInstance().crearAdvertencia("No se puede realizar la reimpresión ya paso el tiempo determinado " + variablesNCR + " min.");
                        this.contenedor.setVisible(true);
                        log.info("No se puede realizar la reimpresión ya paso el tiempo determinado");
                    }
                }
                if (tipo.equals(DocumentosBean.GIFTCARD) || tipo.equals(DocumentosBean.GIFTCARD_P)) {
                    PrintServices.getInstance().reimpresionGiftCard(documentoBean, false, TextArea.getText(), chkVoucher.isSelected());
                }
                if (tipo.equals(DocumentosBean.CREDITO_ABONO)) {
                    PrintServices.getInstance().reimpresionCreditoAbono(documentoBean, false, TextArea.getText());
                }
                if (tipo.equals(DocumentosBean.LETRA_ABONO)) {
                    PrintServices.getInstance().reimpresionLetraAbono(documentoBean, false, TextArea.getText());
                }
            } else {
                this.contenedor.setVisible(false);
                JPrincipal.getInstance().crearAdvertencia("No se han encontrado tickets para los datos introducidos.");
                this.contenedor.setVisible(true);
            }
        } catch (ValidationFormException ex) {
            addError(ex);
        } catch (DocumentoException ex) {
            addError(ex);
        }
    }

    public void accionPrevisualizar() {
        try {
            validarFormulario();
            DocumentosBean documentoBean = DocumentosService.consultarDocByUniqueKey(this.tipo, t_factura1.getText(), t_factura2.getText(), t_factura3.getText());
            if (documentoBean != null) {
                if (tipo.equals(DocumentosBean.FACTURA)) {
                    //se aumenta el estado cupen false se agrega billeton false
                    PrintServices.getInstance().reimpresionFactura(documentoBean, true, true, false, false, false, "", false);
                }
                if (tipo.equals(DocumentosBean.NOTA_CREDITO)) {
                    PrintServices.getInstance().reimpresionNotaCredito(documentoBean, true, "");
                }
                if (tipo.equals(DocumentosBean.GIFTCARD) || tipo.equals(DocumentosBean.GIFTCARD_P)) {
                    PrintServices.getInstance().reimpresionGiftCard(documentoBean, true, "", Boolean.FALSE);
                }
                if (tipo.equals(DocumentosBean.CREDITO_ABONO)) {
                    PrintServices.getInstance().reimpresionCreditoAbono(documentoBean, true, "");
                }
                if (tipo.equals(DocumentosBean.LETRA_ABONO)) {
                    PrintServices.getInstance().reimpresionLetraAbono(documentoBean, true, "");
                }
            } else {
                this.contenedor.setVisible(false);
                JPrincipal.getInstance().crearAdvertencia("No se han encontrado tickets para los datos introducidos.");
                this.contenedor.setVisible(true);
            }
        } catch (ValidationFormException ex) {
            addError(ex);
        } catch (DocumentoException ex) {
            addError(ex);
        }
    }

    @Override
    public void limpiarFormulario() {

        for (IValidableForm elem : formulario) {
            elem.setValidacionHabilitada(false);
        }

        for (IValidableForm elem : formulario) {
            elem.setText("");
        }

        this.t_factura2.requestFocus();

        for (IValidableForm elem : formulario) {
            elem.setValidacionHabilitada(true);
        }

        this.lb_error.setText("");
    }

    private void crearFormulario() {
        // Elementos del formulario susceptibles de validarse o resetearse 
        formulario.add(t_factura2);
        formulario.add(t_factura3);
        formulario.add(TextArea);
    }

    @Override
    public void addError(ValidationFormException e) {
        lb_error.setText(e.getMessage());
    }

    public void addError(DocumentoException e) {
        lb_error.setText(e.getMessage());
    }

    @Override
    public void clearError() {
        lb_error.setText("");
    }

    private void inicializaValidacion() {
        t_factura1.addValidador(new ValidadorObligatoriedad(), this);
        t_factura1.addValidador(new ValidadorTexto(3, true), this);
        t_factura2.addValidador(new ValidadorObligatoriedad(), this);
        t_factura2.addValidador(new ValidadorTexto(3, true), this);
        t_factura3.addValidador(new ValidadorObligatoriedad(), this);
        TextArea.addValidador(new ValidadorObligatoriedad(), this);

    }

    private void validarFormulario() throws ValidationFormException {
        for (IValidableForm e : formulario) {
            try {
                e.validar();
            } catch (ValidationFormException ex) {
                throw ex;
            }
        }
    }

    public String getIdNotaCredito(String caja) throws ContadorException {
        Long valor = ServicioContadoresCaja.obtenerContadorNotaCreditoAnterior(caja);
        if (valor != null) {
            Long numeroanterior = valor - 1;
            String idvalor = numeroanterior.toString();
            String a = new Long(idvalor).toString();
            String b = new Long(idvalor).toString();
            for (int i = a.length(); i < 9; i++) {
                b = "0" + b;
            }

            return Sesion.getTienda().getCodalm() + "-" + caja + "-" + b;
        } else {
            return "";
        }
    }

    public String getIdGifcard(String caja) throws ContadorException {
        Integer valor = ServicioContadoresCaja.obtenerContadorGiftcardAnterior(caja);
        if (valor != null) {
            Integer numeroanterior = valor - 1;
            if (numeroanterior < 0) {
                numeroanterior = 0;
            }
            String idvalor = numeroanterior.toString();
            String a = new Long(idvalor).toString();
            String b = new Long(idvalor).toString();
            for (int i = a.length(); i < 9; i++) {
                b = "0" + b;
            }

            return Sesion.getTienda().getCodalm() + "-" + caja + "-" + b;
        } else {
            return "";
        }
    }

    public String getIdGifcardUso(String caja) throws ContadorException {
        Long valor = ServicioContadoresCaja.obtenerContadorUsoGiftcardAnterior(caja);
        if (valor != null) {
            Long numeroanterior = valor - 1;
            String idvalor = numeroanterior.toString();
            String a = new Long(idvalor).toString();
            String b = new Long(idvalor).toString();
            for (int i = a.length(); i < 9; i++) {
                b = "0" + b;
            }

            return Sesion.getTienda().getCodalm() + "-" + caja + "-" + b;
        } else {
            return "";
        }
    }

    public String getIdAbonoCredito(String caja) throws ContadorException {
        Long valor = ServicioContadoresCaja.obtenerContadorAbonoCreditoAnterior(caja);
        if (valor != null) {
            Long numeroanterior = valor - 1;
            String idvalor = numeroanterior.toString();
            String a = new Long(idvalor).toString();
            String b = new Long(idvalor).toString();
            for (int i = a.length(); i < 9; i++) {
                b = "0" + b;
            }

            return Sesion.getTienda().getCodalm() + "-" + caja + "-" + b;
        } else {
            return "";
        }
    }

    public String getIdAbonoCreditoTemporal(String caja) throws ContadorException {
        Long valor = ServicioContadoresCaja.obtenerContadorCreditoTemporalAnterior(caja);
        if (valor != null) {
            Long numeroanterior = valor - 1;
            String idvalor = numeroanterior.toString();
            String a = new Long(idvalor).toString();
            String b = new Long(idvalor).toString();
            for (int i = a.length(); i < 9; i++) {
                b = "0" + b;
            }

            return Sesion.getTienda().getCodalm() + "-" + caja + "-" + b;
        } else {
            return "";
        }
    }

    public String getIdAbonoLetraAbono(String caja) throws ContadorException {
        Long valor = ServicioContadoresCaja.obtenerContadorAbonoLetraAnterior(caja);
        if (valor != null) {
            Long numeroanterior = valor - 1;
            String idvalor = numeroanterior.toString();
            String a = new Long(idvalor).toString();
            String b = new Long(idvalor).toString();
            for (int i = a.length(); i < 9; i++) {
                b = "0" + b;
            }

            return Sesion.getTienda().getCodalm() + "-" + caja + "-" + b;
        } else {
            return "";
        }
    }

    public void iniciaVista() {
        limpiarFormulario();
        t_factura2.requestFocus();
        chkVoucher.setVisible(Boolean.FALSE);
        chkVoucher.setSelected(Boolean.FALSE);

        if (tipo.equals(DocumentosBean.FACTURA)) {
            l_documento.setText("Factura: ");
            l_documento.setDisplayedMnemonic('F');
        }
        if (tipo.equals(DocumentosBean.NOTA_CREDITO)) {
            try {
                if (Sesion.getCajaActual().getCajaActual() != null) {
                    this.factura.setText(getIdNotaCredito(Sesion.getCajaActual().getCajaActual().getCodcaja()));
                }
            } catch (ContadorException ex) {
                java.util.logging.Logger.getLogger(JReimpresionDocumento.class.getName()).log(Level.SEVERE, null, ex);
            }
            l_documento.setText("Nota de Crédito: ");
            l_documento.setDisplayedMnemonic('N');
        }
        if (tipo.equals(DocumentosBean.GIFTCARD) || tipo.equals(DocumentosBean.GIFTCARD_P)) {
            try {
                l_documento.setText("Recibo: ");
                l_documento.setDisplayedMnemonic('R');
                if (Sesion.getCajaActual().getCajaActual() != null) {
                    if (tipo.equals(DocumentosBean.GIFTCARD)) {
                        chkVoucher.setVisible(true);
                        chkVoucher.setSelected(Boolean.TRUE);
                        this.factura.setText(getIdGifcard(Sesion.getCajaActual().getCajaActual().getCodcaja()));

                    } else {
                        this.factura.setText(getIdGifcardUso(Sesion.getCajaActual().getCajaActual().getCodcaja()));
                    }
                }
            } catch (ContadorException ex) {
                java.util.logging.Logger.getLogger(JReimpresionDocumento.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        if (tipo.equals(DocumentosBean.CREDITO_ABONO) || tipo.equals(DocumentosBean.LETRA_ABONO)) {
            try {
                if (Sesion.getCajaActual().getCajaActual() != null) {
                    if (tipo.equals(DocumentosBean.CREDITO_ABONO)) {
                        this.factura.setText(getIdAbonoCredito(Sesion.getCajaActual().getCajaActual().getCodcaja()));
                    } else {
                        this.factura.setText(getIdAbonoLetraAbono(Sesion.getCajaActual().getCajaActual().getCodcaja()));
                    }
                }
                l_documento.setText("Recibo de Pago: ");
                l_documento.setDisplayedMnemonic('R');
            } catch (ContadorException ex) {
                java.util.logging.Logger.getLogger(JReimpresionDocumento.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        t_factura1.setText(VariablesAlm.getVariable(VariablesAlm.COD_ALMACEN));

        b_previsualizar.setVisible(false);
    }

    @Override
    public void accionLeerTarjetaVD() {
    }

}
