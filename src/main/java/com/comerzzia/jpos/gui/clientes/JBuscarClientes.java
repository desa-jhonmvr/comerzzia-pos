/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JBuscarClientes.java
 *
 * Created on 05-mar-2014, 17:48:19
 */
package com.comerzzia.jpos.gui.clientes;

import com.comerzzia.jpos.entity.db.Cliente;
import com.comerzzia.jpos.gui.IVista;
import com.comerzzia.jpos.gui.JPrincipal;
import com.comerzzia.jpos.gui.clientes.modelos.BusquedaClientesCellRenderer;
import com.comerzzia.jpos.gui.clientes.modelos.BusquedaClientesTableModel;
import com.comerzzia.jpos.gui.components.JPanelImagenFondo;
import com.comerzzia.jpos.gui.components.form.JTextFieldForm;
import com.comerzzia.jpos.gui.validation.IValidableForm;
import com.comerzzia.jpos.gui.validation.ValidationFormException;
import com.comerzzia.jpos.persistencia.print.documentos.DocumentosBean;
import com.comerzzia.jpos.servicios.clientes.ClienteLimitExceededException;
import com.comerzzia.jpos.servicios.clientes.ClientesServices;
import com.comerzzia.jpos.servicios.clientes.ParamBuscarClientes;
import com.comerzzia.jpos.servicios.core.variables.Variables;
import com.comerzzia.util.swing.acciones.Acciones;
import es.mpsistemas.util.log.Logger;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.net.URL;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;

/**
 *
 * @author Administrador
 */
public class JBuscarClientes extends JPanelImagenFondo implements IVista, KeyListener {

    // log
    private static Logger log = Logger.getMLogger(JBuscarClientes.class);
//    private static ClientesBuscar manejador;
    private JPrincipal ventana_padre;
    private List<IValidableForm> formularioBusqueda;
    private List<Cliente> lista;

    /** Creates new form JBuscarClientes */
    public JBuscarClientes() {
        initComponents();
        addFunctionKeys();
    }

    public JBuscarClientes(JPrincipal ventana_padre) {
        super();
        this.ventana_padre = ventana_padre;

        try {
            String prefijo = Variables.getVariable(Variables.POS_UI_SKIN);
            URL myurl = this.getClass().getResource("/skin/" + prefijo + "/" + prefijo + "_buscar_clientes.png");

            this.setImagenFondo((Image) ImageIO.read(new File(myurl.getPath())));
        }
        catch (Exception ex) {
        }

        lista = new ArrayList<Cliente>();

        //iniciamos los componentes
        initComponents();
        iniciaVista();
        formularioBusqueda = new LinkedList<IValidableForm>();
        inicializaFormulario();
        addFunctionKeys();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        t_codcli = new com.comerzzia.jpos.gui.components.form.JTextFieldForm();
        t_nombre_com = new com.comerzzia.jpos.gui.components.form.JTextFieldForm();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        t_descli = new com.comerzzia.jpos.gui.components.form.JTextFieldForm();
        c_tipo = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        t_num_transaccion = new com.comerzzia.jpos.gui.components.form.JTextFieldForm();
        jLabel19 = new javax.swing.JLabel();
        l_formato = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_listaClientes = new javax.swing.JTable();
        b_menu_ppal = new com.comerzzia.jpos.gui.components.form.JButtonForm();
        lb_error = new javax.swing.JLabel();

        jPanel1.setOpaque(false);

        t_codcli.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        t_codcli.setNextFocusableComponent(t_nombre_com);
        t_codcli.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_codcliKeyTyped(evt);
            }
        });

        t_nombre_com.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        t_nombre_com.setNextFocusableComponent(t_descli);
        t_nombre_com.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_nombre_comKeyTyped(evt);
            }
        });

        jLabel2.setDisplayedMnemonic('p');
        jLabel2.setLabelFor(t_codcli);
        jLabel2.setText("CC/RUC/Pasaporte:");

        jLabel5.setDisplayedMnemonic('d');
        jLabel5.setLabelFor(t_descli);
        jLabel5.setText("Apellidos:");

        jLabel4.setDisplayedMnemonic('m');
        jLabel4.setLabelFor(t_nombre_com);
        jLabel4.setText("Nombres:");

        t_descli.setNextFocusableComponent(c_tipo);
        t_descli.setPreferredSize(new java.awt.Dimension(8, 27));
        t_descli.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_descliKeyTyped(evt);
            }
        });

        c_tipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Factura", "Notas de Crédito", "Pagos de Créditos Directos", "Pagos de Créditos Temporales", "Reservaciones", "Plan Novio", "Recibo de Abono de Reservación", "Recibo de Abono de Plan Novio", "GiftCard", "Bono Efectivo" }));
        c_tipo.setNextFocusableComponent(t_num_transaccion);
        c_tipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c_tipoActionPerformed(evt);
            }
        });
        c_tipo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                c_tipoKeyTyped(evt);
            }
        });

        jLabel3.setDisplayedMnemonic('T');
        jLabel3.setLabelFor(c_tipo);
        jLabel3.setText("Tipo Documento:");

        t_num_transaccion.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        t_num_transaccion.setNextFocusableComponent(tb_listaClientes);
        t_num_transaccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_num_transaccionKeyTyped(evt);
            }
        });

        jLabel19.setDisplayedMnemonic('N');
        jLabel19.setLabelFor(t_num_transaccion);
        jLabel19.setText("Num Transacción:");

        l_formato.setForeground(new java.awt.Color(51, 153, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(c_tipo, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(t_num_transaccion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(t_descli, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(t_nombre_com, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(t_codcli, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(l_formato, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(84, 84, 84))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(t_codcli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(t_nombre_com, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(t_descli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(c_tipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(l_formato, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(t_num_transaccion, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLabel1.setFont(jLabel1.getFont().deriveFont((float)18));
        jLabel1.setText("Historial Clientes");
        jLabel1.setFocusable(false);

        tb_listaClientes.setNextFocusableComponent(b_menu_ppal);
        tb_listaClientes.setOpaque(false);
        tb_listaClientes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tb_listaClientes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tb_listaClientesKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tb_listaClientes);

        b_menu_ppal.setText("<html><center>Menú Principal <br/>F12</center></html>");
        b_menu_ppal.setMargin(new java.awt.Insets(2, 9, 2, 9));
        b_menu_ppal.setNextFocusableComponent(t_codcli);
        b_menu_ppal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_menu_ppalActionPerformed(evt);
            }
        });

        lb_error.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lb_error, javax.swing.GroupLayout.PREFERRED_SIZE, 609, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_menu_ppal, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(205, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel1)
                .addGap(1, 1, 1)
                .addComponent(lb_error, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(95, 95, 95)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(b_menu_ppal, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void t_RUCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_RUCActionPerformed
}//GEN-LAST:event_t_RUCActionPerformed

    private void t_RUCKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_RUCKeyTyped
        accionIntro(evt);
}//GEN-LAST:event_t_RUCKeyTyped

    private void t_nombre_comKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_nombre_comKeyTyped
        accionIntro(evt);
}//GEN-LAST:event_t_nombre_comKeyTyped

    private void t_apellidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_apellidoKeyTyped
        accionIntro(evt);
}//GEN-LAST:event_t_apellidoKeyTyped

    private void b_menu_ppalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_menu_ppalActionPerformed
        if (b_menu_ppal.isEnabled()) {
            log.info("MENÚ PRINCIPAL");
            ventana_padre.mostrarMenu();
        }
}//GEN-LAST:event_b_menu_ppalActionPerformed

    private void tb_listaClientesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tb_listaClientesKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                Cliente cliente = lista.get(tb_listaClientes.getSelectedRow());
                ventana_padre.irMostrarCliente(cliente);
            }
            catch (IndexOutOfBoundsException e) {
                ventana_padre.crearError("Debe de realizar una búsqueda antes de consultar un cliente. ");
            }
            catch (Exception e) {
                log.error(e.getMessage(), e);
                ventana_padre.crearError(null);
            }
        }
        else if (evt.getKeyCode() == KeyEvent.VK_TAB && evt.isShiftDown()) {
            tb_listaClientes.transferFocusBackward();
        }
        else if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            tb_listaClientes.transferFocus();
        }
}//GEN-LAST:event_tb_listaClientesKeyPressed

    private void t_codcliKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_codcliKeyTyped
        accionIntro(evt);
}//GEN-LAST:event_t_codcliKeyTyped

    private void t_descliKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_descliKeyTyped
        accionIntro(evt);
}//GEN-LAST:event_t_descliKeyTyped

    private void c_tipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_c_tipoActionPerformed
        crearLabelFormato();
    }//GEN-LAST:event_c_tipoActionPerformed

    private void c_tipoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_c_tipoKeyTyped
        accionIntro(evt);
    }//GEN-LAST:event_c_tipoKeyTyped

    private void t_num_transaccionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_num_transaccionKeyTyped
        accionIntro(evt);
    }//GEN-LAST:event_t_num_transaccionKeyTyped

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.comerzzia.jpos.gui.components.form.JButtonForm b_menu_ppal;
    private javax.swing.JComboBox c_tipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel l_formato;
    private javax.swing.JLabel lb_error;
    private com.comerzzia.jpos.gui.components.form.JTextFieldForm t_codcli;
    private com.comerzzia.jpos.gui.components.form.JTextFieldForm t_descli;
    private com.comerzzia.jpos.gui.components.form.JTextFieldForm t_nombre_com;
    private com.comerzzia.jpos.gui.components.form.JTextFieldForm t_num_transaccion;
    private javax.swing.JTable tb_listaClientes;
    // End of variables declaration//GEN-END:variables

    private void accionLimpiarFormulario() {
        t_codcli.setText("");
        t_nombre_com.setText("");
        t_descli.setText("");
    }

    private void crearAdvertencia(String msg) {
        ventana_padre.crearAdvertencia(msg);
    }

    private void accionIntro(KeyEvent ke) {
        if ((t_codcli.hasFocus() || t_nombre_com.hasFocus() || t_descli.hasFocus() || t_num_transaccion.hasFocus() || c_tipo.hasFocus()) && ke.getKeyChar() == '\n') {

            JTextFieldForm focoEn = null;

            if (ke.getComponent() instanceof JTextFieldForm) {
                focoEn = (JTextFieldForm) ke.getComponent();
            }
            realizarBusqueda(ke);

            if (tb_listaClientes.getRowCount() < 1 && focoEn != null) {
                focoEn.requestFocus();
            }

            if (tb_listaClientes.getRowCount() >= 0) {
                ListSelectionModel selectionModel = tb_listaClientes.getSelectionModel();
                selectionModel.setSelectionInterval(0, 0);
                tb_listaClientes.requestFocus();
            }
        }
    }

    private void realizarBusqueda(KeyEvent evt) {
        if (evt.getKeyChar() == '\n') {
            try {
                ParamBuscarClientes param = new ParamBuscarClientes();
                param.setCodcli(t_codcli.getText().trim());
                param.setNombre_com(t_nombre_com.getText().trim());
                param.setDescli(t_descli.getText().trim());
                if(!t_num_transaccion.getText().isEmpty()){
                    param.setTipoDocumento(getTipoDocumento());
                    param.setNumTransaccion(t_num_transaccion.getText().trim());
                }

                lista = ClientesServices.getInstance().consultar(param, Variables.getVariable(Variables.POS_CONFIG_MAXIMOS_RESULTADOS_ARTICULOS));

                if (lista.isEmpty()) {
                    crearAdvertencia("No se han encontrado clientes con los filtros indicados.");
                }
                
                refrescarTablaClientes(new BusquedaClientesTableModel(lista));
                if (tb_listaClientes.getRowCount() >= 0) {
                    ListSelectionModel selectionModel = tb_listaClientes.getSelectionModel();
                    selectionModel.setSelectionInterval(0, 0);
                    tb_listaClientes.requestFocus();
                }

            }
            catch (ClienteLimitExceededException ex) {
                crearAdvertencia("Se ha excedido el número de resultados de búsqueda.");
            }
            catch (ValidationFormException ex) {
                crearAdvertencia("El tipo de documento no es de ninguno de los soportados");
            }
            catch (Exception ex) {
                log.error(ex.getMessage(), ex);
                crearAdvertencia("Error en la consulta de Clientes");
            }
        }
    }

    private void refrescarTablaClientes(BusquedaClientesTableModel busquedaClientesTableModel) {
        tb_listaClientes.setModel(busquedaClientesTableModel);
        tb_listaClientes.getColumnModel().getColumn(0).setPreferredWidth(120);
        tb_listaClientes.getColumnModel().getColumn(1).setPreferredWidth(285);
        tb_listaClientes.getColumnModel().getColumn(2).setPreferredWidth(285);
        tb_listaClientes.getColumnModel().getColumn(3).setPreferredWidth(80);
    }

    @Override
    public void iniciaVista() {
        lista.clear();

        // Cuidado. Los listeners no se deben de crear en inicia() dentro de iniciaVista porque cada vez que se entre en la pantalla se crean nuevos
        inicia();

        // Reset del formulario
        t_codcli.setText("");
        t_nombre_com.setText("");
        t_descli.setText("");
        lb_error.setText("");
        // Inicio del foco
        t_codcli.requestFocusInWindow();
    }

    private void inicia() {
        // Borde vacio para tablas, Viewports y scrollpanels
        Border empty = new EmptyBorder(0, 0, 0, 0);
        tb_listaClientes.setDefaultRenderer(Object.class, new BusquedaClientesCellRenderer());
        refrescarTablaClientes(new BusquedaClientesTableModel(lista));

        jScrollPane1.setViewportBorder(empty);
        tb_listaClientes.setBorder(empty);
        jScrollPane1.getViewport().setOpaque(false);
        t_codcli.addKeyListener(this);

        t_nombre_com.addKeyListener(this);
        t_descli.addKeyListener(this);
        
        crearLabelFormato();

        //addFunctionKeys();
    }

    private void addFunctionKeys() {

        log.info("Función de acciones de teclado");

        KeyStroke f12 = KeyStroke.getKeyStroke(KeyEvent.VK_F12, 0);
        Action listenerf12 = new AbstractAction() {

            public void actionPerformed(ActionEvent ae) {
                b_menu_ppalActionPerformed(ae);
            }
        };
        addHotKey(f12, "IdentClientF12", listenerf12);

        Acciones.crearAccionFocoTabla(this, tb_listaClientes);
    }

    @Override
    public void iniciaFoco() {
        t_codcli.requestFocus();
    }

    @Override
    public void keyTyped(KeyEvent ke) {
    }

    @Override
    public void keyPressed(KeyEvent ke) {
    }

    @Override
    public void keyReleased(KeyEvent ke) {
    }

    private void inicializaFormulario() {
        formularioBusqueda.add(t_codcli);
        formularioBusqueda.add(t_nombre_com);
        formularioBusqueda.add(t_descli);
    }
    
    private void crearLabelFormato() {
        String tipo = (String) c_tipo.getSelectedItem();
            if(tipo.equals("Factura")){
                l_formato.setText("Formato:TTT-CCC-XXXXXXXX");
            }
            if(tipo.equals("Notas de Crédito")){
                l_formato.setText("Formato:TTT-CCC-XXXXXXXX");              
            }
            if(tipo.equals("Pagos de Créditos Directos")) {
                l_formato.setText("Formato:TTT-CCC-DDDD");
            }
            if(tipo.equals("Pagos de Créditos Temporales")) {
                l_formato.setText("Formato:TTT-CCC-LLLL");
            }
            if (tipo.equals("Reservaciones")){
                l_formato.setText("Formato:TTT-RRRR");
            }
            if (tipo.equals("Plan Novio")) {   
                l_formato.setText("Formato:TTT-PPPP");               
            }
            if (tipo.equals("Recibo de Abono de Reservación")){
                l_formato.setText("Formato:TTT-RRRR/A");            
            }
            if (tipo.equals("Recibo de Abono de Plan Novio")){
                l_formato.setText("Formato:TTT-PPPP/A");              
            }
            if (tipo.equals("Bono Efectivo")){     
                l_formato.setText("Formato:TTT-BBBBBBBB");         
            }
            if (tipo.equals("GiftCard")) {
                l_formato.setText("Formato:TTT-CCC-GGGG");              
            }   
    }    
    
    private String getTipoDocumento() throws ValidationFormException {
        String tipo = (String) c_tipo.getSelectedItem();
        if(tipo.equals("Factura")){
            return DocumentosBean.FACTURA;
        }
        if(tipo.equals("Notas de Crédito")){
            return DocumentosBean.NOTA_CREDITO;
        }          
        if(tipo.equals("Pagos de Créditos Directos")){
            return DocumentosBean.CREDITO_ABONO;
        }
        if(tipo.equals("Pagos de Créditos Temporales")){
            return DocumentosBean.LETRA_ABONO;
        }  
        if(tipo.equals("Reservaciones")){
            return DocumentosBean.RESERVACION;
        }
        if(tipo.equals("Plan Novio")){
            return DocumentosBean.PLAN_NOVIO;
        }  
        if(tipo.equals("Recibo de Abono de Reservación")){
            return DocumentosBean.ABONO_RESERVA;
        }
        if(tipo.equals("Recibo de Abono de Plan Novio")){
            return DocumentosBean.ABONO_PLAN_NOVIO;
        }  
        if(tipo.equals("GiftCard")){
            return DocumentosBean.GIFTCARD;
        }
        if(tipo.equals("Bono Efectivo")){
            return DocumentosBean.BONO;
        }   
        throw new ValidationFormException("El tipo de documento no es de ninguno de los tipos soportados");
    }
}
